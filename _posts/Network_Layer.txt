								網絡層

	網絡層關注如何路由數據包從源主機至目標主機，它不同與低層的點-點連接，它實現了端-端連接。

	網絡層提供給傳輸層的服務:

			向上提供的服務應獨立於路由器技術；
			應該向傳輸層屏蔽網絡拓撲；
			傳輸層可用的網絡地址應該由一個統一的編址方案，並且需要跨越網絡；

---------------------------------------------------------------------------------------------------------------

網絡層設計問題:

	--------

	存儲轉發數據包交換:

		網絡層上的路由器不同於數據鏈路層上的網橋，它的路由是基於IP地址進行的，且數據包有可能會跨越網絡。
	於是需要一個所有互聯網主機都適用的統一編址方案，數據包到達LAN之後，由LAN中的路由器或網橋來轉發數據包(或
	數據幀)	至內部的主機。路由器擁有獨立內存，數據報在途中節點路由器中可能會被緩衝排隊，轉發規則依賴路由算法。

	--------

	無連接服務的實現:

		網絡層提供給上層的服務也屬於網絡設計一環，並且網絡層除了路由外，還需要控制網絡阻塞。Internet網絡
	層使用的是IP協議，這個協議提供了無連接服務；上層的傳輸層的目標則是在無連接服務的基礎上實現有連接服務。

		無連接的服務的數據包稱作爲數據報(datagram)，對應的網絡稱爲數據報網絡(datagram network)；它一般用
	於廣域網連接，且隨機路由。

		網絡層的有連接服務需要使用虛電路(VC,virtual ciruit)，這種技術類似於電話網絡中的電路交換技術；對應
	的網絡稱爲虛電路網絡(virtual circuit network)。

		網絡層可以時先不同的網絡互聯，而從一個LAN發送給另一個LAN的數據報需要穿越不同網絡，此時決定數據包的
	轉發路徑的方法就是路由算法。路由算法在進行後還會在內部保存哈希表來記錄對應不同地址的轉發規則，且該表會被
	其下次路由算法更新。

	--------

	面向連接服務的實現:

		面向連接服務實現的方法有兩種:

				1>虛電路VC；
				2>標籤交換(label switching)；常用協議就是多協議標籤交換(MPLS,MultiProtocol Label S-
				-witching)，主要被用在ISP網絡。使用這個協議則IP數據包會被一個20位連接標識或標籤的
				MPLS頭包裹，在MPLS網絡中依據該標籤來轉發。

	--------

	虛電路於數據報網絡:

		基本差別:


			問題			數據報網絡			虛電路網絡

			電路建立		不需要				需要

			尋址			每個包包含源地址於目標地址	每個包包含VC號

			狀態信息		路由器不保留連接狀態		每個連接，每條VC都需要路由器保存狀態

			路由方式		單獨隨機路由			VC建立時選擇路由，之後靜態轉發

			路由器失效影響		只影響崩潰路由器緩衝中的	整條VC連接將無法使用
						數據報
			服務質量		困難				容易，但是VC建立時需要協商資源預留

			擁塞控制		困難				容易，只要在建立時可以獲得足夠的資源


			
		資源包含，內存，CPU週期，帶寬等；可以提前預留資源。

---------------------------------------------------------------------------------------------------------------

路由算法:

		路由算法(routing algorithm)是網絡層軟件的一部分，它負責轉發路徑確定。數據包到達路由器時被存儲緩衝
	，之後將進行查表操作，再進行轉發。數據報單獨路由，虛電路則靜態轉發；於是虛電路也可稱爲會話路由(session ro-
	-uting)。

		路由算法需要滿足:正確性，簡單性，魯棒性，穩定性，公平性，有效性。且有的路由算法可能需要得知網絡
	拓撲；並且路由算法也需要快速收斂到固定的路徑集合。

		公平性涉及到資源分配問題，而有效性則需要保證網絡的實際吞吐量；實際吞吐量指的是網絡提交的有效數據包。
	然而公平性與有效性一般互相衝突，因此需要一種折中的優化方法。

		路由算法基本分爲兩類:非自適應算法和自適應算法。

			非自適應算法:

				Nonadaptive algothrim.這種算法不會根據當前測量和估計的流量或網絡拓撲來調整路由決策。
			路由方案一般是預先設計好的，在路由器接入網絡後被下載。這種方式也稱爲靜態路由(static routing)。

			自適應算法:

				Adaptive algothrim.這種算法會改變自己的路由決策以適應拓撲結構的變化，通常也會反映出
			流量的變化情況。也稱爲動態路由(dynamic routing)。動態路由算法在各個方面不同:獲取信息來源，改
			變路徑時間，路由優化度量。

	--------

	優化原則:

		優化原則以最優路徑爲準，這稱爲最優化原則(optimality principle)。

		最優路徑的一般敘述是:如果路由器J在從路由器I到路由器K的最優路徑上，那麼從J到K的最優路徑也必定遵循同樣的
	路由。
		網絡拓撲中的最優路徑可以組合起來構建一顆彙集樹(sink tree)，這棵樹包含了網絡中各個節點的最優路徑集合。而
	所有的路由算法的目標是爲所有路由器找到這顆彙集樹，並依賴這顆樹來轉發數據包。

		需要注意的是，彙集樹不一定是唯一的:也有可能存在相同路徑長度的其他彙集樹。如果允許選擇所有的可能路徑，則
	彙集樹就會變成更一般的結構，這個結構稱爲有向無環圖(DAG,Directed Acyclic Graph)。DAG沒有網絡環路。

		但是優化原則需要決定:每臺路由器獨立地獲取用於計算彙集樹的信息，還是使用其他方法來收集這些信息。	因爲網絡
	中的鏈路或路由器可能會故障，從而會導致網絡拓撲結構的變化。


	--------

	最短路徑算法:

		首先，最短路徑(shortest path)這個概念有不同的權衡，選擇最短延遲或者選擇最短的物理尺寸。測量長度
	的方法是使用跳數TTL(Time To Live)，這個字段附帶在數據包中，每經過一個途中節點將被減1。也可以使用延遲，
	平均最短延遲就是最短路徑，此時最短路徑就是最快路徑。最短路徑的標準並非至有物理尺寸與平均延遲，還可以有
	帶寬，平均流量，通信成本等。通過改變權重標準，路由算法可以根據一種標準或多種標準組合來確定最短路徑。

		最短路徑算法的基本工作方式:
			首選選擇一個權值，然後將網絡拓撲擴展爲一張加權無向圖，圖中的節點即是主機或路由器。
			選擇一個源端與一個目標端來計算最短路徑；算法會首先檢查源端相鄰的節點之間的長短，依據
		權值來決定。首先將源端標記爲永久標記，之後向周圍發送探測消息。周圍的節點將被記錄爲暫時標記且
		會標記出該節點距離前一探測節點的距離；選擇這些路徑中的最短路徑並將鏈路上的對方節點標記爲永久
		標記(重新標記)。
			在一個節點被重新標記時，這個節點需要標記出這次探測的發起者。之後永久標記節點也向周圍發
		送探測；依次進行，直到得到源端-目標端的最短路徑。

			重新標記的依據是:
				如果節點找到一條鏈路，且節點自身的標記(來自它的前一節點，權值)加上這條鏈路距離
			要小於鏈路上對方節點標記(來自當前節點探測的暫時性標記)時，就重新標記那個暫時性節點，重
			新標記爲永久性節點。

		
		最短路徑算法根據不同的權值組合，將有不同的結果，這個算法依賴於分佈式計算；即算法任務有網絡中的
	節點來協同工作完成。算法的收斂時間在大型網絡中耗時較長，但是不需要路由器得知網絡細節。這個算法不要求
	路徑上的節點得知目標端的地址，而是探測周圍最短路徑並記錄至路由表；之後按照最短路徑轉發。

	--------

	泛洪算法:

		泛洪算法在網橋中被用來後向學習。路由器也可以用泛洪算法來獲得路由表，但是泛洪會廣播大量數據包，
	因此在算法收斂之前會增加網絡負載。
		
		路由器的泛洪算法工作:

			首先需要給需要泛洪的數據報加上序號來防止重複包泛洪。因爲泛洪會轉發數據包至除入境端口
		外的其他端口；而網絡是互相連接的，因此網絡種的節點在收到未知數據包時也會進行泛洪。
			路由器會記錄數據包中的序號至一個表中，表中應存在一個計數器，計數器取值爲最新觀察到的
		序號；這標識直到這個值的整個序列的所有數據包都已經觀察到了。若從其他端口收到了相同序號或者小
		於計數器取值的序號的數據包則說明這個包是重複的；於是就丟棄該數據包。除了序號外，在TTL至到達0
		時，數據包也會被網絡丟棄。

	
		泛洪算法的魯棒性很好(即中途節點崩潰，拓撲發生變化時)，能快速適應結構變化，它總能得到一條可行的
	路徑。但是算法的收斂較慢，並且在高負載時，大量的泛洪數據包將會增加網絡負載；可能會導致網絡擁塞或者網絡
	崩潰問題。

	--------

	距離矢量算法:

		距離矢量路由(distance vector routing)算法的工作方式:

			每個路由器維護一張表(即一個矢量)，表中列出當前已知的到每個目標的最佳距離以及使用的鏈路。
		這個表中的信息通過週期性地鄰居之間相互交換信息得到，最終每個路由器都將瞭解到到達每個目標地最佳
		路由。之後的路由決策通過簡單的查表即可獲知。

		這個算法有時也有其他名稱，例如分佈式Bellman-Ford路由算法。距離矢量路由算法最初被用在ARPANET網絡
	上，也曾被用於Internet，相應的協議是RIP協議。

		這個算法的距離同樣對應於權值的不同而不同。但是這個算法的收斂慢，並且當網絡拓撲結構變化時，新路徑
	的修改也將延遲很久；在這期間有很大概率會使用因爲節點崩潰而無法通行的表項。

		無窮計算問題:

			整個網絡最佳路徑的尋找過程稱爲收斂(convergence)。
			距離矢量路由算法有個非常嚴重的問題:

				好消息反應迅速，壞消息的反應異常遲緩。

			這個算法收斂之後的路由只是查表，之後信息交換時期將更新表。表中記錄了到網絡中每個目的地的
		最短距離，當從附近的信息交換得知有一條新的最短路徑，則更新表，下次路由沿這個表項轉發。如果網絡中
		的某一節點崩潰，此時將導致無效的路徑依舊存在網絡中。

			例如

				A	B	C	D	E	

			這個5個節點通過算法都記錄了去往各個節點的最短路徑，此時如果A節點崩潰離開網絡。則在下次信息
		交換時期，B將無法獲得來自節點A的信息，但是可以得到來自C的信息。此時C的表項中記錄了去往A的最短路徑，
		於是B更新表，將去往A的表項改寫爲來自C的信息中的記錄並加1；它下次轉發去往A的數據包將會發往C。
			但是B與C去往A的路線分別是:B# B->A	C# C->B->；這導致還是使用了已經失效了的路由。在下一
		次的信息交換時，C從B得知到去往A的新的最短路徑(例如跳數)，於是它在這個值上加1並更新表項。再下一次的
		信息交換時，D將得知新的來自C的去往A的記錄消息，於是它也更新表。持續下去，將不斷的增加去往A的距離記錄，
		但是A早以離開了網絡。這即時無窮計數問題。

			於是可以得知壞消息反應遲緩的原因:沒有一個路由器具有比它所有鄰居的最小值還大於1的值，並且它們
		也無法得知鄰居的最短路徑可能會通過自身。

	--------

	鏈路狀態路由:

		鏈路狀態路由算法(link state routing)，它有幾個變種算法 -- IS-IS，OSPF；常被用於IPS或Inernet中。

		鏈路狀態路由算法的設計思想:

				1>發現它的鄰居節點，並瞭解其網絡地址；
				2>設置到每個鄰居節點的距離或成本度量值；
				3>構造一個包含所有剛剛獲知的鏈路信息包；
				4>將這個包發送給所有其他的路由器，並且接收來自所有其他路由器的信息包；
				5>計算出到每個其他路由器的最短路徑。
		
		鏈路狀態路由算法可以得知整個網絡的拓撲結構細節。

		
		-----------

		發現鄰居:

			一個路由器啓動時，首先構造一個HELLO包發送給它的點到點鏈路的鄰居。線路另一端的路由器都將返回自己
		的全局唯一名稱。
			在多個路由器通過一個廣播鏈路連接時，需要從這些路由器中選擇一個指定路由器(designated route)來運行
		路由協議。

		-----------
		
		設置鏈路成本:

			成本選擇有多個權值。鏈路狀態路由算法需要每條鏈路以距離和成本度量來尋找最短路徑。若地理位置分散的
		話，使用延遲作爲度量值比較合適；此時可以使用IPMC協議來構造一個ECHO分組，對方收到該分組後需要立即返回確認，
		之後計算延遲時間即可得到鏈路延遲。

		-----------

		構造鏈路狀態包:

			構造格式一般是:首先時發送方標識；接着是一個序號和年齡以及一個鄰居列表。

			鏈路信息包的構造時機一般由兩種方式:一是週期性地創建信息包並交換；二是當網絡拓撲結構發生變化時才
		構造信息包。

		-----------

		分發鏈路狀態包：

			這是最技巧地部分，要求所有路由器必須快速並可靠地獲得全部的鏈路狀態數據包。如果不同的路由器時用了
		不同版本的拓撲結構，那麼它們計算出來的路由可能會不一致從而引發環路或目標主機不可到達等其他問題。

			最基本的發布算法是泛洪算法，爲了控制泛洪需要加上序號。

			其他問題是:

				序號繞回問題，從而可能引起混淆；這裏使用一個32位的序號可以解決。
				
				如果一個路由器崩潰，那麼它將丟失所有序號的記錄表。如果它再從0開始泛洪，則數據包將被視爲
				重複數據包而被拒絕。	--	錯誤恢復問題

				傳輸中的比特錯誤導致序號中的某個位反轉，從而導致計數器的值出錯；那麼小於或等於這個值的
				數據包將被視爲重複而拒絕，即便這個信息包是一個新的信息包。

			而這些問題的統一解決方案就是在每個數據包的序號之後包含一個年齡(Age)字段，這個值每秒減1；當Age爲0
		時，來自路由器的該信息將被丟棄。在初始泛洪過程中也將遞減Age值來控制泛洪。
			
			一個優化方案是:路由器在收到一個被泛洪的鏈路狀態數據包時，首先將該信息包保留一段時間；在這期間如果
		收到了來自同一個源路由器的鏈路狀態數據包，則比較它們之間的序號，相等則丟棄重複包，不相等則丟棄舊包並保留
		新包。保留的信息包在超時後也將被轉發出去。

			在分發鏈路狀態信息包時，一個路由器收到了一個鏈路狀態數據包後需要向對方返回確認。不重複則需要轉發，
		重複則只向源路由器返回確認。

		-----------

		計算新路由:
						
			鏈路狀態路由算法的計算在本地進行，它需要比距離矢量算法更多的內存。如果一個網絡中有N個路由器，且
		每個路由器都有K個鄰居，則消耗的內存將是NK；內存需求與NK成正比。

			IS-IS(IS-IS,Intermediate System-Intermediate System)鏈路狀態協議:

					常被ISP用在中間系統到中間系統，即ISP內部網絡中。它是專門爲DECnet而設計的，
				後來被ISO採納用於OSI協議；之後被多次修改以擴展能夠處理其他協議。

			OSPF(Open Shortest Path First)開放最短路徑優先鏈路狀態協議:

					它是在IS-IS之後由IETF設計，且吸收了很多IS-IS的創意:泛洪鏈路狀態更新的
				自穩定方法；LAN上的指定路由器概念及計算和支持路徑分裂和多個度量的方法等。與
				IS-IS最主要的差別是IS-IS可同時攜帶多個網絡層協議的信息，OSPF不支持這個特性。

			路由算法的一般性是:連接狀態，距離向量和其他路由算法依賴於所有路由器計算路徑的處理

	--------

	層次路由:

		層次路由，它是用來爲了適應網絡的增長而設計的方案。隨着網絡增長，路由器中的表也持續增加，而路由器的內存
	是有限的；於是爲了降低路由器開銷與負載，使用層次路由方案。

		採用層次路由後，路由器被劃分成區域(region)。每個路由器直到如何將數據包路由到自己所在區域內的目標地址，但
	是不瞭解其他區域的內部結構；也就是說路由器中的表將只記錄自己所在區域相關的路由。

		一般網絡獨立劃分一個區域，但是對於大型網絡兩級的層次劃分不夠；還需要進一步劃分。
		區域可以組織成簇(cluster)；簇可以組織成區(zone)；區可以組織成羣(group)...

		一般組織結構:

				A---	C	----	D	---E
					|		|
					B		F
					|		|
					|		|
					|		|
					|		|
					|		|
				I---	G	----	K	---H

		互聯網絡的線路可以是:B->C->D->F->K->G->B；於是分成了四個區域，每個區域有一個或者兩個路由器與其他區域
	互相鏈接；而區域內的路由器只知曉自己所處區域的網絡結構。之後也可以再將這些區域組織成一個簇，繼續鏈接到其他的
	大型網絡上；也可以在可各個區域內再進一步劃分出更小的區域。
		這樣劃分直接減小了網絡中路由器的內存開銷，各個區域的路由器，它們只需要記錄一個本地路由表與去往對方區域
	的一個遠程路由表即可。隨着區域數與每個區域中路由器之比值的增加，節省下來的表空間也隨之增加；然後並不是免費得到的，
	它的代價形式是路徑長度增加了。

		於是，在組成大型網絡的時後需要考慮分區問題。層次路由應該分多少層合適？
		例如:
			一個720個路由器的子網，沒有分區，則所有路由器將保留720個表項。如果子網分成24個區域，每個區域
		30個路由器，則每個路由器只需要30個本地表項和23個遠程區域的表項，一個53個表項。

			如果使用3級層次，共8個簇，一個簇9個區域，一個區域10個路由器；那麼每個路由器需要10個表項用於記錄
		本地路由，8個去往本地簇的其他區域的表項，7個表項用於遠程簇的路由，一共需要25個表項。

			於是可以得知:一個N個路由器的網絡，最優層是lnN層，每個路由器所需表項是 eln N 個。
			
		由於分層路由導致的平均路徑長度的實際增長非常小，一般是可以接受的。

	--------		

	廣播路由:

		一個數據包發送給網絡中的所有主機的方式稱爲廣播(broadcasting)。

		廣播有各種各樣的方式:

			1>給每個地址單獨發送一個數據包的副本；
			
			但其實這種方法非常消耗帶寬，同時還要求知道網絡中所有主機的地址。

			2>多目標路由(multidestination routing)；

			每個數據包包含一組目標地址或者一個位圖，由該位圖指定所期望到達的目標。中途路由器接收到這個數據包
			後依據位圖來進行路由決策，首先檢查目標地址再確定輸出路線，然後生成多份副本發送到對應的出境線路上。
			這個方法會分散組地址集合至不同的線路上，經過足夠的跳數後每個數據包將只包含一個目標地址。

			多目標路由同單個地址的數據包一樣，只是在多個數據包要遵循同一條線路時，其中一個數據包承擔了全部的
			開銷；提高了網絡利用率。但是該方法仍需要得知全部的地址，並且提高了路由器的負擔。

			3>泛洪方法；

			泛洪能有效地利用鏈路，且路由器的決策相對地簡單。然而它不適合普通點到點通信。

			4>逆向路徑轉發(reverse path forwarding)；

			當一個廣播數據包到達一個路由器時，路由器就檢查它到來的那條線路是否正是通常用來給廣播源端發送數據包
			的那條線路(即最佳路徑)。如果是則說明該數據包是到達當前路由器的第一份副本，它是從最佳路徑被轉發過來
			的；於是路由器將該數據包轉發到除了到來的那條線路之外的所有其他線路上。如果不是從首先廣播線路到來的，
			則該廣播數據包有可能被當作重複包而丟棄。

			逆向路徑轉發的主要優點是:

				有效，易於實現，只向其他方向上的鏈路發送一個廣播數據包，要求只有需要路由器直到如何到達全部
			目標；路由器無需記錄序號或在數據包中列出全部的目標地址。

			5>逆向路徑轉發改進；

			這種算法明確使用了以發起廣播的路由器爲根的彙集樹或其他任何便利的生成樹。生成樹(spanning tree)是網絡的
			一個子集，它包含所有路由器且沒有環路。彙集樹也是生成樹的一種。如果每個路由器都知道它的哪些線路屬於生成
			樹，那麼它就可以將廣播數據包複製到除了該數據到來線路之外的所有生成樹線路上。

			這個方法可最佳利用帶寬但是需要路由器得知這棵生成樹纔可以正常工作。

			鏈路狀態路由算法可以得知這顆生成樹，但是距離矢量路由算法無法得知網絡拓撲於是無法得到這顆生成樹。

	--------
	
	組播路由:

		給網絡中的一部分地址或一組地址發送一個數據包的方式稱爲組播(multicasting)。使用的路由算法稱爲組播路由。所有
	的組播方案都需要一些方來來創建組，加入組成員，刪除組成員，刪除組。

		組播路由方案建立在廣播路由方案之上。具體算法同樣是逆向路徑轉發，但是需要對生成樹進行修剪，使其只含有組地址。

		首先所有路由器都有一些生成樹集合，選出較優的一顆生成樹然後對其修剪，從中修剪掉不屬於某個組的去往其他節點的鏈路。
	
		生成樹修剪方法有很多種:

			如果使用了鏈路狀態路由算法，則每個路由器都有一或多顆網絡的生成樹。於是，每個路由器針對組內的每個發送者
		構造一顆它自己的修剪後的生成樹；先按常規方法構造一顆以發送者爲根的生成樹，然後從彙集節點上刪除所有鏈接到其他非
		本組成員的路徑。	----	組播(MOSPF,Multicast OSPF)協議就是以這個方式工作。

		-----------

			如果採用了距離矢量路由算法，因爲無法得知網絡拓撲結構，因此需要使用不同的修剪策略。
			基本算法是逆向路徑轉發算法。一旦一個路由器沒有任何主機屬於某個組，且不是其他組的中途節點，那麼它需要
		用PRUNE消息作爲接收組播消息的響應，告知發送該消息的鄰居不要再給自己發送任何組播消息。
			如果路由器一個路由器自己所連接的主機沒有任何一個屬於改組的成員，並且從它以前轉發組播消息的所有線路
		中都接收到了這樣的修剪消息，那麼它同樣以PRUNE消息來響應。
			通過這種遞歸方式，最終將修剪出一顆生成樹。距離矢量組播路由協議(DVMRP,Distance Vector Mulitcast Routing 
		Protocl)就是以這種方式工作的。

		-----------

		這種生成樹修剪的方法需要路由器做大量工作且需要保存修剪生成樹；例如一個網絡有n個組，每個組m個節點，因此每個路由器
		針對n個組有m顆修剪生成樹，因此一共需要存儲nm顆修剪生成樹。

		-----------

		這種生成樹修剪的方法需要路由器做大量工作且需要保存修剪生成樹；如果工作在大型網絡中將引起大量的計算與內存開銷。


			-----------

			另一種方法是採用基於核心樹(core-based trees)的技術，計算某個組的單顆生成樹。

			這種方法，所有路由器都同意某個路由器作爲根；這個根稱作爲核心(core)或會聚點(rendezvous point)，然後
		每個成員向根發送一個數據包來建立這棵樹。這棵樹即是組播數據包遵循的路徑集合。作爲性能優化，組播數據包不需要
		先發送給核心，而是在到達核心樹後一邊向上轉發給核心，另一邊沿着樹的其他邊進行轉發。

			這種方法所有的組播源都是用同一顆共享樹是無法達到最優的；但是可以節省大量的存儲開銷，消息發送和計算。
		每個路由器只需要爲每個組保存一棵生成樹；而且不屬於這顆共享樹一部分的路由器不需要爲組做任何工作。

			這個方法常被用於Internet的稀疏組播，成爲流行協議的一部分；例如協議獨立組播(PIM,Protocol Independent
		Multicast)。	

	--------

	選播路由:

		選播路由，數據包傳遞給最近的一個組成員。發現這些路徑的方案即是選播路由(Anycast routing)。

		使用選播路由方案是爲了提供內容分發等服務。
		
		有廣播方案與組播路由的方案的基礎，可以不用爲選播路由設計新的方案。

		距離矢量路由算法下的選播路由:

			組地址有同一個組地址；距離矢量路由算法還是先分配向量，並且節點只選擇去往一個組地址的最短路徑。之後
		其他用和可以同這個組成員通信請求服務。

		鏈路狀態路由算法下的選播路由:

			同距離矢量路由算法一樣，只是因爲鏈路狀態路由算法下的路由器可以得知網絡拓撲結構；此時無法使用一個地址
		來作爲整個組成員的地址。這樣幾乎找不到通向一個組地址的最短路徑，這將導致跨越網絡空間。

	--------

	移動主機路由:

		移動主機(mobile host)即普通的移動終端設備。
		家鄉位置(home location)/家鄉地址即本地ISP分配的原始地址。

		在移動主機從一個網絡移動到另一個網絡後，也會在這個新的網絡上獲得一個轉交地址(care of address)。這個移交地址是
	新網絡中的地址。之後移動主機將告知家鄉位置的一臺主機關於自己的當前位置，這臺家鄉位置上的主機稱爲家鄉代理(home agent)。
	假若此時有終端與移動主機通信，那麼數據包首先會傳輸給家鄉代理；因爲移動主機已經切換了網絡，於是家鄉代理使用一個新的頭
	來包裹或封裝(encapsulated)這個數據包，再轉發該數據包至移動主機的轉交地址；之後移動主機返回數據包給通信的對方終端。下一
	次數據包的傳送將直接傳送到轉交地址而不再先發送到家鄉代理。

		這種封裝數據包傳輸類似於隧道。

		在移動主機獲得轉交地址加入網絡之前，通信將不可用。

	--------
	
	自組織網絡路由:
	
		如果每個節點用無線通信並同時承擔路由器和主機的雙重角色，並且網絡中的節點彼此靠近，那麼該網絡稱
	爲自組織(Ad hoc)網絡，或者移動自組織網絡(MANET,Mobile Ad hoc NETworks)。	
	
		自組織網絡中最流行的一種路由算法是:Ad hoc 按需距離矢量(AODV,Ad hoc Ondemand Distance Vector)路
	由算法。

		-----------

		路由發現:

			在AODV中，到某個目的地的路由是按需發現，即只有當某個節點要給目標節點發送數據包時纔去尋
		找路徑。這種方式可以適應移動終端加入或離開網絡時導致的拓撲結構變化。

			AODV算法:
				
				每個節點都維護了一張距離矢量表，以目標節點作爲關鍵字，每個表項給出了有關該目標
			節點的信息；其中包括了數據包的出境線路。
	
				在源端開始向目標節點發送數據包時，首先檢查自己的表；路由不存在則構造一個ROUTE
			 REQUEST(路由請求)包並開始泛洪。經過泛洪，該請求包最終到達了目標節點，於是目標節點構造
			一個ROUTE REPLY(路由應答包)。這個應答包沿請求包路徑逆向單播給發送者(源端)，這項工作要求
			中途節點必須記住給它發送請求包的節點。中途節點轉發應答包時會將TTL加1來告知距離目標節點
			的距離；應答包還告知了從哪一條出境線路可以去往目標節點。中途節點在處理應答包時會更新自己
			的路由表，在應答包到達源端時，完整的路由路徑就建立起來了。

				修改:發送者廣播一個ROUTE REQUEST包，其中TTL設爲1，如果在合理時間內應答包未返回，
			則再發送一個請求包並將TTL加1；按照這個方法範圍逐漸擴大，可以抑制網絡中出現大量廣播請求包
			的情況。

		-----------

		路由維護:

			每個節點週期性向鄰居發送HELLO分組並等待迴應，如果沒有迴應到來，則說明某個鄰居已經與自己
		斷開了鏈接。這個主機不可到達的信息可以用來更新路由表。

			對於每個可能的目標節點，每個節點都會記錄自己的活躍鄰居，即在最近t秒內向自己傳送過到達目
		標節點的數據包的節點。當它的某一鄰居不可達時，它檢查路由表查看哪一條路由使用了這個不可到達的節點。
		不再有效的路徑將從表中刪除，並且向後傳播舊的路由已經失效的消息。如此遞歸直到舊路由被全部清除。

			爲了加快收斂，路由包括了一個由目標節點控制的序號。目標序號如同邏輯時鐘；目標節點每迴應一次
		ROUTE REPLY就遞增該序號。源端在進行路由請求時將會在請求包中加入最後一次使用的那條路由的序號，這個
		序號可能是失效了的路由的序號，也可能時初始值0。該請求報文將被廣播直到發現一條具有更高序號的路由。

		
		AODV協議的精髓是在於中間節點只存儲正在使用的路由，其他廣播期間得到的路由將在時間到達後超時。

		另一個按需路由方案是動態源路由(DSR,Dynamic Source Routing)。

		還有一種貪婪邊界無狀態路由(GPSR,Greedy Perimeter Stateless Routing)，它討論的是基於地理位置信息
	的不同的路由策略。

---------------------------------------------------------------------------------------------------------------

擁塞控制算法:

		擁塞(congestion)，網絡中存在太多的數據包導致數據包被延遲和丟失，從而降低了傳輸性能。擁塞處理由
	網絡層和傳輸層完成。

		實際吞吐量(goodput)，表示網絡傳遞有用(useful)數據包的傳送速率。

		流量控制不同於擁塞控制，流量控制是避免快速發送方用數據淹沒慢速接收方；擁塞控制是避免數據包被
	延遲或丟失，從而導致網絡性能下降。

	
	--------

	擁塞控制途徑:

			1>流量感知路由；
			2>准入控制；
			3>流量調節------|
					|-抑制包；
					|-顯式擁塞通知；
					|-逐跳後壓；
			4>負載脫落；	

		-----------

		流量感知路由:

			避免網絡擁塞有:增加網絡資源或者減少負載。

			增加資源就是升級網絡，也就是供給(provisioning)，耗時可能需要幾個月。
			減少負載就是減少注入到網絡的數據包。

			流量感知的路由(traffic-aware routing):根據每天的流量模式度身制定路由，將流量拆分到多個路徑上。

			最直接的方式就是修改鏈路權重，更改爲一個(固定的)鏈路帶寬，傳輸延遲，(可變)測量負載或平均
		排隊延遲的函數。在路由器檢測到權值的變化時採取不同的措施來進行路由，可以將高負載的鏈路上的流量分攤
		到空閒鏈路或低負載鏈路上。當然這會導致繞開最短路徑而引入部分延遲開銷，不過要比網絡擁塞而帶來的影響
		小。
			流量感知路由需要流量感知型的路由器來支持，並且權值的設置也相當重要，不同的權值將導致不同的
		結果。而且這種方案還需要避免路由振盪，比如新的低負載鏈路接入後，高負載上的流量全部移動至新鏈路上；
		導致新鏈路從低負載直接變成了高負載。
			有兩種方法可以解決路由振盪:
				一是多路徑路由，即從源到目的地可以存在多條路徑；
				二是流量慢慢遷移，以適應路由算法的收斂。

			由於流量感知路由有多種問題存在，Internet路由協議一般不依賴負載來調整路由，而是在路由協議外部
		通過慢慢改變它的輸入來調整路由。	---	流量工程(traffic engineering)。
			
		-----------

		准入控制:

			准入控制(admission control):如果新的鏈接將導致網絡擁擠不堪，那麼應該拒絕這種新連接的建立。

			准入控制廣泛應用於VC鏈路，如果需要在非虛電路的網絡中實現准入控制，則需要傳輸層來輔助。准入
		控制在資源不足時將拒絕連接建立。

		-----------

		流量調節:

			在Internet和其他計算機網絡中，發送方調整它們的傳輸速度以便發送網絡能夠實際傳輸的流量。在這種
		設置下，網絡的目標是在擁塞發生之前正常工作，而在擁塞即將到來時告知發送方減緩流量的注入速度。這種反饋
		是一種常態而不是針對特殊情況的一種處理。
			擁塞避免(congestion avoiddance)有時用來對比某個操作點，以示與已經在負載運行的網絡區分開。

			通常選擇在擁塞發生之前採取措施避免擁塞，要比在擁塞發生之後處理擁塞要好的多。
		
			-----------
			
			抑制包:
	
				通知發送方，網絡正處於擁塞。這種方式中，路由器將選擇一個被擁塞的數據包，給數據包的源
			主機返回一個抑制包(choke packet)。同時在原來的擁塞數據包上添加一個標記(設置頭部中的一位)，因
			而它在前行的路徑上不會產生更多的抑制包。源主機在收到抑制包後將減緩它注入數據包至網絡的速度。

				數據報網絡中，路由器隨機選擇一個數據包向源端返回抑制包。數據報網絡中數據包單獨路由，
			因此隨機選擇一個擁塞的數據包有很大概率是快速發送方。快速發送方也有可能會接收到來自不同路由
			器的抑制包，此時接收到一個抑制包後應丟棄後續的抑制包。
				
				早期Internet的抑制包是使用SOURCE-QUENCE消息。

			-----------

			顯式擁塞通知:

				除了生成額外的包發出擁塞警告外，路由器可以在它轉發的任何數據包上打上標記(設置數據包頭
			的某一個標誌位)發出信號，表明它正在經歷擁塞。接收方在收到這些數據包時將得知網絡處於擁塞時期，
			在它返回確認時順便告知發送方減緩速率。這就是顯示擁塞通知(ECN,Explicit Congestion Notification)。
				這個方案已被使用在Internet上，這是早期擁塞信令協議的細化，尤其是對於二進制反饋方案的細
			化，該方案層用於DECNET體繫結構。

				IP頭中的兩位用來記錄數據包是否經歷擁塞。數據包從源端出發時不會加上標記，但是在經過擁塞
			鏈路上的路由器時，路由器將會設置這個標記。接收方在得知數據包在經歷擁塞時，會在它的下一個應答
			數據包裏回顯該標誌作爲顯示擁塞信號。	
			
			-----------

			逐跳後壓:

				通常抑制包是路由器向源端返回抑制包，並繼續向前傳輸數據包。這些繼續傳輸的數據包也將增加
			其後續節點的壓力。而且在網絡速度很高但傳播距離很長時，在抑制包到達源端之前又有許多新的數據包被
			注入至網絡。在ECN被源端收到之前，可以讓中途的路由器在收到ECN後，減緩它發往後續節點的流量；於是
			每一跳都將會減緩中途路由器的壓力。但是代價是上游的路由器將引入內存壓力；ECN與逐跳後壓可以在擁塞
			發生之前儘量避免擁塞。

		-----------

		負載脫落:

			負載脫落(load shedding):一切手段都不起作用時，網絡將不得不丟棄它無法傳遞的數據包。
			
			類似於電力網的負載脫落，電力網在用電用戶過多時爲了避免電力系統崩潰而有意切斷某些特定區域的電力
		供給。

			而網絡丟棄數據包進行負載脫落有兩種策略:

				一是取決於應用類型，對於文件傳輸舊數據包的價值要高於新的數據包；因爲在舊數據包到來之前
			新來到的包也不可以直接提交給傳輸層，因爲順序是錯的。但是對於實時媒體數據流來說，新數據包的價值
			要高於舊數據包。		---	這被稱爲葡萄酒(wine)策略。

				二是由發送方來合作完成。由發送方在數據包中打上標記，向網絡指示數據包的重要等級。
			例如路由信息包，用來建立路由，比普通數據包要重要，因此不可以丟棄；又或者是視頻壓縮算法的"MPEG"，
			這些算法定期發送全幀，然後發送差異幀，這種情況下應優先丟棄差異幀的數據包。
				-----	這被稱爲牛奶(milk)策略。(當然沒有人願意主動降低數據包的重要等級)


			-----------

			隨機早期檢測:

				隨機早期檢測，即在有出現擁塞的趨勢時就開始採取對策來避免擁塞。
				在Internet上的大多數主機沒有收到ECN信號，一般認爲網絡阻塞的方式是檢測到了丟包。即在超時
			時間內確認包沒有返回。於是相應的會採取應對措施，比如TCP在檢測丟包後將減緩速度。
				於是可以在擁塞發生之前讓路由器提前丟包，但是需要確定好合適的時間點，即發送方合適採取行動。

				解決這個問題的流行算法是隨機早期檢測(RED,Random Early Detection)。爲了確定何時開始丟包，
			路由器將維護一個運行隊列長度的平均值。當某條鏈路上的平均值超過了一個閥值該鏈路就認爲即將擁塞。因
			此路由器將隨機丟棄一部分需要使用這條鏈路的數據包，隨機丟棄是基於快速的發送方發送的數據包要比普通
			發送方發送的數據包多，從而丟棄的大概率是來自快速發送方的數據包這一事實。

				相比於等到緩衝區溢出才丟包的路由器，RED路由器將更有效的控制擁塞，提高網絡性能。但是，如果
			ECN是可用的，則應該首選ECN。RED應該只用在主機無法收到ECN消息的場合。


---------------------------------------------------------------------------------------------------------------

服務質量:

		服務質量由網絡應用程序要求的。例如實時通信要求低延遲；文件下載則需要大量的帶寬。

		提供良好的服務質量由個簡單的解決方案:過度配置(overprovisioning)；然而並非有那麼多網絡資源可供使用，
	並且大部分數據流量呈突發性。

		確保服務質量需要解決4個問題:

				1>應用程序需要網絡什麼樣的質量？
				2>如何規範進入網絡的流量？
				3>爲了保障性能如何在路由器預留資源？
				4>網絡能否安全地接受更多流量？

		沒有單一技術可以解決這四個問題，它們需要使用不同的策略來解決。

		-----------
	
		應用需求:
			
			從源端發送至接收端的數據包流稱爲一個流(flow)。面向連接的網絡中，一個流或許是一個連接上的全部
		數據包；無連接網絡中，一個流是從一個進程傳輸至另一個進程的所有數據。

			每個流的需求可由4個參數來表示:帶寬，延遲，抖動，丟失；
			這些參數決定了一個流要求的服務質量(QoS,Quality of Service)。

			帶寬:數據的傳輸速率；
			延遲:數據包的傳送消耗的時間；
			抖動:數據包的接收時間變化；
			丟失:數據包丟失；

			常見應用程序的服務質量要求:

				應用		帶寬		延遲		抖動		丟失

				電子郵件	低		低		低		中等
				文件共享	高		低		低		中等
				瀏覽網頁	中等		中等		低		中等
				遠程登陸	低		中等		中等		中等
				音頻點播	低		低		高		低
				視頻點播	高		低		高		低
				電話		低		高		高		低
				視頻電話	高		高		高		低


			爲了適應各種應用，網絡可以支持不同類別的QoS。例如ATM網絡支持:

				1>恆定比特率；
				2>實時可變比特率；
				3>非實時可變比特率；
				4>可用比特率；

		-----------

		流量整形:

			只有先描述出流量的特徵與形狀才能提供對應的服務。

			流量整形(traffic shaping):指調節進入網絡的數據流的平均速率和突發性所採用的技術。它的目標是
		允許應用程序發送適合它們需求的各種各樣的流量，包括帶有某種程度的突發，但要有一個簡單而有用的方式向
		網絡描述可能的流量模式。當一個流建立後，用戶與網絡就這個流量形狀達成一致的協議。

			服務等級約定(SLA,Service Level Agreement):客戶與服務提供者之間的約定；只要客戶履行了約定中的
		義務，並且根據商定的合約發送數據包，服務提供者就承諾按時將數據包遞交到目的地。

			流量監管(traffic policing):指服務商監測來自用戶的數據流是否符合了合約中的義務；如果不滿足則會
		採取相應的行爲，例如丟包或者打上低優先的標籤等。

		-----------

		漏桶與令牌桶:

			有一種限制應用程序發送數據包的有效方法是使用在數據鏈路層的滑動窗口協議。在網絡層上更普遍的
		描述流量特徵的方式是:漏桶算法和令牌桶算法。

			漏桶:
				即一個入口速率不限，但是出口速率限制的網關。可以抽象理解爲一個漏桶或者漏桶。
				無論注入漏桶的數據包的速率多大，只要漏桶中還緩衝着數據包，那麼數據包從桶中被發送的速
			率是個恆定速率R；如果桶裏沒有緩衝數據包，則出桶速率降爲0。當桶的容量B滿時，任何注入桶的數據包
			將丟失。

				漏桶可以整形和監管應用程序注入網絡的數據流。

				漏桶算法(leaky bucket algothrim)可以集成在操作系統中，也可以用在ISP的邊界路由器上。

			令牌桶:
				即將網絡接口想象成一個漏桶，來自上層的數據包速率爲R，桶的容量爲B。爲了發送一個數據包，
			此時需要從桶內取出令牌(俗稱內容)；如果桶是空的，則需要等待更多的令牌到達才能發送另一個數據包。
				這種方式像幀突發，這裏緩衝的數據；在收到合適數量的數據後構建成數據包發送出去。在數量
			未達到時，先來的數據將被緩衝直到更多的數據到來。

			最大突發長度的計算:

				如果突發長度爲S秒，最大輸出率爲M B/s，令牌桶容量爲B字節，令牌到達率爲R B/s；則突發輸出
			最多可包含B+RS字節；同時也知道S秒時間的最大速度突髮長度爲MS。因此有:

					B+RS=MS
					S=B/(M-R)

				假設B=9600KB，M=125MB/s，R=25MB/s，則S大約等於94毫秒。
	
				漏桶和令牌桶可以將突發傳輸下降到一個長期速率傳輸；但是峯值降下後會導致長期恆定傳輸速率，於是
			爲了平滑流量，可以在令牌桶之後再加上一個令牌桶，第二個令牌桶使用較高的輸出速率。基本上第一個桶表述
			流量特徵，確定平均速率但允許少量突發；第二個桶降低了進入網絡的突發峯值速率。

				當令牌桶被用來整形主機流量時，數據包必須排隊並延遲；當令牌桶被網絡路由器用於流量監管時，該算法
			確保了發送的數據包不會比允許發送的更多。

		-----------

		包調度:

			包調度算法(packet scheduling algorithms):在同一個流的數據包之間以及在競爭流之間分配路由器資源的
		算法。

			爲不同的流可以預約的潛在資源有以下3種:

					1>帶寬；
					2>緩衝區；
					3>CPU週期；

			-----------

			FIFO算法:

				數據包調度算法負責分配帶寬和其他路由器資源。具體做法是確定下一次把緩衝區中的哪些數據包發送
			到輸出線路。路由器會對入境數據包排隊，每個轉發端口都有一個隊列，且發送順序與到達隊列的順序相同。這
			種算法稱作先入先出(FIFO,First-In First-Out)或先來先服務(FCFS,First-Come First-Serve)。

				FIFO在隊列滿時將丟棄新到達的數據包，這種方式稱作尾丟包(tail drop)。

				FIFO調度算法易於實現，但它無法提供良好的服務質量，因爲當存在多個流時，一個流很容易影響到其
			他流量的性能。

			-----------

			公平隊列:
				
				Fair Queueing.

				該算法的實質是針對每條輸出線路，路由器爲每個流設置單獨的隊列。當線路空閒時，路由器循環掃描各
			個隊列，然後從下一個隊列中取出第一個數據包發送。這使得所有流量都以同樣的速率發送數據包。
		
				然而該算法有個缺陷:如果排隊中的數據包比較大，那麼在它發送時相較於小數據包會使用更多的帶寬。
				改進該缺陷的方法是:把"數據包-數據包"的循環方式改成"字節-字節"的循環方式。

				字節-字節的方法需要計算一個虛擬時間，這個時間指每個數據包發送完畢所需要的輪數。每一輪循環從
			所有有數據待發送的隊列中排空一個字節；然後按照數據包的結束時間順序排隊，並以該順序真正發送數據包。

				即便使用"字節-字節"的方法，還是會存在一個缺陷:它給所有主機以相同的優先級。然後隨着流的類型不同，
			它要求的服務質量也不同。

				改進方法是:加權公平隊列(WFQ,Weighted Fair Queueing)。即給不同的流加上不同的優先級(權值)，之後高
			優先級的使其多發送幾個字節。
					假設每一輪字節數是一個流的權重W，則時間有:

							F_i=max(A_i,F_i-1)+L_i/W

					A_i	到達時間；
					F_i	完成時間；
					L_i	數據包長度；
					W	權值；

				改進的同時還需要考慮的是算法實現的複雜度。WFQ要求數據包按照它們的完成時間插入到一個有序隊列中。
			如果有n個流，則針對每個數據包至少需要O(logN)操作，這在高速路由器上很難實現(因爲有多個流)。

				再改進:使用一種稱爲赤字循環(Deficit round robin)的近似算法，該算法針對每個數據包只有O(1)次操作。

			-----------
	
			時間戳順序:

				包調度的最後一個方法是時間戳順序。

				數據包攜帶時間戳並且按照時間戳順序發送。當數據包被路徑上的一系列路由器發送時，時間戳記錄該數據包
			離調度之後或之前還有多遠。排在路由器隊列中的其他數據包後面的數據包趨向於稍後調度，而首先獲得服務的數據包
			則趨向於優先調度。

				按照數據包的時間戳順序發送數據包有利於加快慢速數據包，而且同時放緩快速數據包。結果是網絡傳遞的所
			有數據包具有更一致的延遲。
	
	--------

	准入控制:

		服務質量的保證通過准入控制的過程來建立。用戶向網絡提供一個有QoS需求的流量；然後網絡根據自己的容量以及向其他流
	做出的承諾決定是否接受或拒絕該流。若接受，網絡就要提前在路由器上預留容量，以便保證新流發送時的服務質量。

		QoS路由(QoS routing):如果最佳路徑上沒有足夠的剩餘容量，那麼通過選擇另外一條產能過剩的不同路徑，仍然可能爲新流
	提供QoS保證。
		一個簡單的方法是選擇同等成本的路徑，並將流量均等或按比例分攤到出境鏈路的容量。

		使用QoS路由時，將涉及到應用程序於QoS路由器之間的協商問題:

			因爲流協商過程中會涉及許多方(發送方，接收方，中間節點)，所以必須用特定參數來精確描述流，並且這些參數是
		可以爲各方所協商的。		---	這組參數稱爲	-	流規範(Flow Specification)。
			
			流規範實例:

				參數			單位

				令牌桶速率		B/s
				令牌桶容量		B
				峯值速率		B/s
				最小數據包尺寸		B
				最大數據包尺寸		B
			

			通常情況下，發送方先生成流規範，當這份流規範沿着路徑傳播時，沿途路由器對它進行檢查，並根據需要修改相應
		的參數。參數只能降低不可調高，在流規範到達另一端時，流的參數就被建立起來了。

		關於路由器如何將流規範轉換成一組特定的資源並預留:

			因爲鏈路有空閒週期，如果鏈接需要利用容量的每一位來完成自己的工作，那麼甚至數位的空轉都有可能生成一個永
		遠也無法擺脫的積壓。
			一般情況下鏈路可能會排起隊列，引起延遲。

			假設數據包隨機到達 x個/s 速率；包長度隨機；路由器的發送速率是 y個/s 發送到鏈路上。假設數據包的到達和服務
		均服從泊松分佈(M/M/1排隊系統)，則可以得知一個數據包所經歷的平均延遲T爲:

				T=1/y * 1/(1-x/y)=1/y * 1/(1-z)

			z=x/y 是CPU利用率。假如路徑上有30個路由器，那麼僅排隊延遲也有600微秒。

			一種對應於帶寬和延遲性能保證的流規格說明方法是:

				流量源端採用(R,B)令牌桶整形；路由器採用WFQ，每個流都有一個權重W，W足夠大到排空速率爲R的令牌桶。

					R< W*C/(權重總和)	C -- 容量

				如果流的速率爲1Mbps。路由器和輸出鏈路的容量爲1Gbps，那麼在路由器的輸出鏈路上，該流的權重必須
			大於所有流的全部權重的千分之一；這將可以保證該流具有最低帶寬。如果流得不到足夠大的速度，則不允許進入
			網絡。

			流的最大排隊延遲是令牌桶突發大小的函數。
			兩種極端的情況:

				如果流量平緩，數據包將以它們到達的速率被路由器排空，此時沒有排隊延遲。
				
				如果流量被堆積，那麼一次到達路由器的最大突發數爲B。這種情況下的最大排隊延遲D將是以保證帶寬
				排空突發的時間，B/R。如果D過大，那麼流必須向網絡請求更多的帶寬。

	--------

	綜合服務:

		綜合服務 RFC 2205--2210

		它主要針對單播和組播應用。

		-----------

		RSVP	--	資源預留協議

			在綜合服務體繫結構中，最主要的也是網絡用戶可見的那部分是資源預留協議(RSVP,Resource reSer Vation P-
		rotocol)。	RFC 2205--2210

			基本功能:
				RSVP允許多個發送方給多個接收組傳送數據，也允許接收方自由地切換頻道，並且在消除擁塞的同時優化
			帶寬的使用。

			RSVP基於組播路由。於常規組播不同之處在於，這裏的組播需要一些額外的信息，這些信息被週期性地組播給生成樹
		中地路由器，告訴它們在內存中維護特定的數據結構。

			爲了獲得更好的接收效果並且消除擁塞，一個組中的任何接收方都可以沿着樹給組播發送方發送一條預留消息。途中
		的路由器都將注意到此消息，並預留必要的帶寬。如果沒有足夠的帶寬，就返回報告失敗。當這條預留消息到達組播發送方時，
		從發送方到該接收方一條路徑上的帶寬都得到預留(沿着生成樹完成預留)。

			RSVP在多個發送方一個接收方的情況時，會創建兩條邏輯信道並都單獨預留帶寬。在一個發送方，多個接收方的情況
		時；如果從源端到兩個接收方的生成樹路徑中有同一條鏈路，那麼不會在這條鏈路上再單獨預留一份資源，而是兩個接收方共
		享這一段鏈路上的資源。(然而兩個接收方請求的帶寬可能不同)

			進行資源預留時，接收方可以(有選擇地)指定一個或多個期望接收的數據源。它也可以說明在預留期間這些選擇是否
		固定不變，或者是否希望以後還可以改變數據源，路由器將使用這些信息來優化帶寬。在有兩個接收方時，如果它們都同意以
		後不再改變數據源地話，那麼它們只需共享一條路徑即可。採用這種完全動態策略地理由是將被預留地帶寬與數據源的選擇分
		離開。

	--------	

	區分服務:
		
		基於流的算法有能力爲一個或者多個流提供非常好的服務質量，但是缺陷是都需要爲每個流預先進行設置。在存在大量的流時，
	這些算法的擴展性很差。

		IETF設計了一個更簡單的服務質量方法:基於類別(classs based)的服務質量；另一個更流行的名稱爲區分服務(differentiated 
		service)。
		基於類別的服務質量:每個路由器本地實現，無須事先提前設置流，也不牽涉整條路徑。
		IETF標準化了區分服務 RFC 2474 2475

		區分服務由一組路由器提供，它們構成一個管理域。管理規範定義了一組服務類別，每個服務類別對應於特定的轉發規則。若用戶
	訂購了區分服務，則它們的數據包將會打上服務類型標籤；這個功能IP頭的區分服務字段可實現。

		單跳行爲(PHP,per hop behaviors):對應於數據包在每個路由器中得到的待遇，而不是對數據包在整個網絡中的保證。

		流的服務質量與類別的服務質量之間的差異在於:流的服務質量保證需要在整個生成樹路徑上協商，而類別服務質量只應用在
	特定域的路由器上。基於流的方案在單獨連接上獨佔專享資源；基於類別的方案則所有類別的流都使用同一份預留資源，這份資源被
	共享但是無法獨佔。

		-----------

		加速轉發:

			加速轉發(expedited forwarding):服務由運營商提供；基本思想是:

				服務分類:常規的和加速的。
				
					常規流量則同其他常規流量共享並競爭網絡資源；而加速流量則同其他加速流量共享一份
				預留給加速流量使用的預留資源。(當然，常規流量的數量多，且優先級低於加速流量)

			基本策略是:

				數據包上分類打上標籤，可以在主機上完成或者進入網絡上的第一個網關上完成。在加速轉發數據包經過
			區分服務的區域時，將會給予優惠待遇。例如在路由器中插入在其他常規流量前面轉發，減少排隊的延遲或者不排隊。
			這樣的服務，路由器將會預留一份用於加速轉發服務的資源；在加速轉發數據包到達後將預留資源分配給它使用。

				標記工作在主機上做時，入口網關承擔流量監管任務；好處是操作系統可以利用更多的信息來確定哪些數據包
			屬於哪些流，並且降低了入口網關的工作量(因爲入口網關可能被多個用戶共享)。

		-----------

		確保轉發:

			管理類別服務的一種更精細的方案	--	確保轉發(Assured forwarding)	--	RFC 2597

			確保轉發:它規定了4中優先級別，每種級別都擁有自己的資源。並且標準還針對正經歷擁塞的數據包定義了三種丟包的
		概率:低，中，高。於是結合起來即有12種服務類別。

			確保轉發的工作方式是:

				第一步劃分數據包的級別，可能在主機上完成，也可能在入口網關上完成。
				第二步是確定每個數據包的丟包類別。方法是讓數據包經過令牌桶，桶上設置三個突發等級閥值，依據這些
				突發閥值來分類丟包等級。然後將優先級和丟包率結合起來編碼到數據包裏。
				最後數據包由網絡內部路由器處理，路由器上的數據包調度器依據不同類別來區分數據包。一般是來建立不同
				的權值的WFQ，高權值的數據包給予更多的資源，但是低權值的數據包也能發送。而且在擁塞即將到來時，較高
				丟包概率的數據包有更大的概率被路由器丟棄。

---------------------------------------------------------------------------------------------------------------

網絡互聯:

	兩個或多個網絡連接起來形成網絡互聯(internetwork)或稱爲互聯網(internet)。

	--------

	網絡之間的差異:

		一般不同之處:

			項目			某些可能性

			提供的服務		無連接與面向連接
			尋址			不同大小，扁平或層次
			廣播			提供或缺乏(組播同樣)
			數據包尺寸		每個網絡有自己的最大尺寸
			有序性			有序和無序傳遞
			服務質量		提供或缺乏；許多不同種類
			可靠性			丟包的不同級別
			安全性			隱私規則，加密等
			參數			不同超時值，流規範等
			記賬			按連接時間，包數，字節數或不收費

	--------

	何以連接網絡:

		網絡設備:

			中繼器，集線器，交換機，網橋，路由器，網關..

		使用一個共同的網絡層來互連不同的網絡:
		
			不同的網絡底層細節不同，因此連接不同的網絡相當困難。
			一般使用網橋來連接鏈路層同類的LAN，使用路由器來連接網絡層不同的網絡。但一般網絡互連建設
		必須在至有一個共同的網絡層時才能工作。

			方法1:		

				可以處理多個網絡協議的路由器稱爲多協議路由器(multiprotocol router)。它的工作是翻
			譯協議或把連接留給更高層的協議來處理。

			方法2:

				網絡之間轉換數據包。然而除非數據包格式比較相近，具有相同信息字段，否則這種方法是
			不完整的，將會失敗。
	
	--------
		
	隧道:

		隧道(tunneling):將來自其他網絡的數據包進行封裝，運輸到另一個網絡中。

		
		隧道:		A與C網絡類型一致，B與A和C不同。

			A			C
				----B----

			將來自C的數據包從網絡B中傳輸至A中。

			在數據包到達網絡B時將被使用一個新的頭來封裝，穿越網絡B；在B的終點時，這個頭將被拆除然後
		數據包被轉發進入A。

			C->A中途經過了網絡B，B中的路徑即是隧道。

		隧道被廣泛應用於連接因使用其他網絡而被隔離的主機和網絡。其結果即是生成了覆蓋(overlay)網絡，因爲它
	有效地覆蓋在基礎網絡之上。但是隧道的缺點是無法到達位與隧道之下網絡的主機，即B網絡中的主機，因爲數據包無法
	從隧道中間逃生。

	--------

	互聯網路由:

		互聯網由多個不同的網絡連接而成。每個網絡獨立於所有其他網絡運營，因此這樣的網絡稱爲自治系統(AS,
	Autonomous System)。AS的良好默認模型就是ISP網絡，一個ISP網絡也是由多個AS組成。因爲互聯網可能比構成它的
	任何一個網絡都大，因此它或許需要採用層次結構的擴展性較好的路由算法，即使沒有一個網絡需要使用層次結構路由。

		在每個網絡中使用一個域內(intradomain)或內部網關協議(interior gateway protocol)進行路由。即ISP
	網絡的內部，ISP內部也有許多AS，如果這些AS同屬一個ISP，則域內路由協議基本一致。

		ISP與其他ISP相互連接，當數據包要去往其他ISP網絡時，即跨越構成互聯網的網絡，需要使用到域間(int-
	-erdomain)或外部網關協議(exterior gateway protocol)。

		網絡可能會使用不同的域內協議，但是必須使用相同的域間協議。域間路由協議一般稱作爲:邊界網關協議(
	BGP,Border Gateway Protocol)。

	--------

	數據包分段:

		MTU:路徑最大傳輸單元(MTU,Path Maximum Transmission Unit)。即一條鏈路上的接收方的最大可接收的數據包
	尺寸大小。一般一個網絡的MTU限制一樣，但是不同的網絡可能會有所不同。

		每個網絡或鏈路上都會限制其數據包的最大長度，原因一般是:

			硬件；
			操作系統；
			協議；
			國家或國際標準；
			爲了減少錯誤引起的重傳；
			期望防止數據包佔用信道時間太長；

		解決大數據包穿越小尺寸的網絡時引起的網絡互連問題的一般方法:

			一，確保不會發生這個問題；當然需要源端知道接收方的MTU，然而無連接網絡數據包獨立路由，因此
			只知道接收方的MTU也無濟於事。

			二，允許路由器將數據包拆分成段，將每個段作爲一個獨立的網絡層數據包發送。然後拆分容易重組
			卻很麻煩。而且還要考慮，這些分段應該在哪個位置進行重組？

				分段與重組有兩種策略:

					1,從源端到接收端的中途所有網絡都不曾察覺了分段；即小尺寸網絡引起的分段過程
				對沿途後續網絡是透明的。方式是數據包在路由器處分段發送，在到達下一個網絡的路由器後
				被重組；持續進行這個步驟。

					2,避免在任何一個中間路由器上重新組合分段。這種方案是，一旦一個數據包被分端後，
				每個分段都當作一個數據包來處理。這是非透明分段方式。它的優勢是減少了路由器的工作，但
				是引入了額外的頭開銷與緩衝區開銷以及丟包概率。

				
				IP採用的設計思想:

					給每個段一個數據包序號，一個數據包內的絕對字節偏移量和一個指明是否到達數據包
				末尾的標誌位。			

		最好的方法還是避免在網絡中進行分段；於是有一種新的策略:
			
			路徑MTU發現(path MTU discovery):它的工作原理是，每個IP數據包發出時在頭部設置一個比特，指示不
		允許對該數據包實施分段操作。如果一個路由器接收到的數據包太大，它就生成一個報錯數據包返回給源端，然後
		丟棄該數據包。源端收到報錯信息包後，使用這些信息將出錯的數據包進行分段；在遇到一個更小的MTU網絡時，
		如此重複這個過程。	

			優點:源端可以得知數據包合適的長度。
			缺點:增加發送數據包的啓動延遲。

	
---------------------------------------------------------------------------------------------------------------

Internet的網絡層:

	--------

	Internet的10大原則:		---	RFC 1958

		1>保證工作；直到多個原型系統成功與對方相互通信。
		2>保持簡單；應該在有疑問時使用最簡單的解決方案。
		3>明確選擇；多種解決方法時明確選擇一種方法。
		4>模塊開發；每一層的協議完全獨立於所有其他的協議，協議棧思想。
		5>期望異構性；網絡構成可以不同。
		6>避免靜態選項和參數；使用可協商的方法確定參數。
		7>尋找好的而不是完美的設計；堅持好的設計並改進特殊情況下的處理。
		8>嚴格發送，寬容接收；只發送嚴格符合標準的數據包，但是允許接收不同標準的數據包。
		9>考慮可擴展性；性能可擴展處理不同情況。
		10>考慮性能和成本；即網絡資源的成本與網絡的性能。

	骨幹網(Backbone Network):由高帶寬線路和快速路由器組成的主要網絡。骨幹網中的最大的一個稱爲一級網絡(Tier 1 Networks)。

	Internet服務提供商(ISP,Internet Service Provider):連接在骨幹網絡上，爲普通用戶與企業或數據中心等提供Internet接入服務。

	Internet協議(IP,Internet Protocol):將整個Internet黏合在一起的網絡層協議，通用網絡協議。

	
	--------

	IPv4:

		IP數據包分爲一個頭和一個正文，正文部分稱爲有效載荷。

		IP頭由20字節的固定長度部分和一個可選的變長部分組成。

		IP頭組成結構:

		bit				32

			4	4	8			16
			版本	IHL	區分服務		總長度
				16			1 1  1		13
				標識			||DF|MF|	分段偏移量
			8		8		16
			生存期		協議		頭校驗和
						32
						源地址
						32
						目標地址
					
						選項(0或更多)

			版本(4bit):記錄數據報屬於協議哪個版本；
			IHL(4bit):指明頭到底有多長；(以32位字長度爲單位)IHL_min=5,IHL_max=15
			區分服務(8bit):區分服務的種類；
				舊版，一共6位，3位優先級，3位延遲，吞吐量，可靠性中選一；
				新版，一共8位，前6位標記數據包服務類別，後2位用來攜帶ENC；
			總長度(16bit):包含了數據報中的所有內容，即頭和數據部分。
			標識(16bit):讓目標主機確定一個新到達的分段屬於哪一個數據報。
			未使用(1bit):未使用；
			DF(1bit):"不分段"(Don't Fragment)標誌位。
			MF(1bit):"更多的段"(More Fragment)標誌位，除最後一個段設爲0，其他段需設爲1。
			分段偏移量(13bit):指明該段在當前數據報中的位置。除了數據報的最後一個段以外，其他段的長度必須是8字節的倍數。
			生存期(8bit):限制數據報生存期的跳數計數器，TTL。
			協議(8bit):指出處理該數據包的上層協議。
			校驗和(16bit):檢測頭部信息是否出錯。校驗算法執行過程:當數據到達時，所有16位累加起來，再取結果的補碼。其目的是
			到達數據包的頭校驗和計算結果應該爲0。
			源地址(32bit):源主機的IP地址，網絡中唯一。
			目標地址(32bit):目標主機的IP地址，網絡中唯一。
			選項(Options):
				提供修改行爲的途徑，每個選項的第一個字節是一個標識碼，標明選項類別。選項字段的長度會被填充至4的倍數。
					
				IP選項:

					選項			描述

					安全性			標明數據報的安全級別
					嚴格源路由		給出數據報遵循的完整路徑
					鬆散源路由		給出一些不能錯過的路由器
					記錄路由		要求每個路由器加上自己的IP地址
					時間戳			要求每個路由器佳加上自己的IP地址和時間戳
				
					安全性:指明了信息的祕密程度。
					嚴格源路由:給出了從源到目標的完整路徑，形式是一系列IP地址；轉發路徑必須遵循這些IP地址。
					鬆散源路由:同嚴格源路由但是允許途中經過其他IP地址。
					記錄路由:告訴沿途路由器將自己的IP地址附加到可送字段中。
					時間戳:沿途路由除了記錄自己的IP外還附加時間戳。

			-----------
	
			IP地址:

				IP地址一般指向一個網絡接口而不是一個主機，如果一臺主機同時位於兩個網絡中，則可以有兩個IP地址。
			IP地址具有唯一性。
				
				-----------
		
				前綴:

					IP地址具有層次性。每個32位地址由高位的可變長網絡和低位的主機標識兩部分數據組成。
					
					前綴(prefix):一個網絡對應一塊連續的IP地址空間，這塊地址空間就稱爲地址的前綴。
			
					IP地址的書寫方法一般是點分十進制表示法。此格式下4個字節中的每個字節寫成十進制。
					例如 133.43.22.1
	
					前綴書寫方法:
			
						前綴書寫方法給出了塊的最低IP地址和塊的大小。塊的大小由網絡部分的位數決定；
					主機部分剩餘位數可以有所變化。於是可以得知塊的大小是2的冪。

						前綴書寫格式:	前綴IP/網絡部分長度

						例如 133.43.22.1，假設它的前綴IP是133.43.0.0，那麼前綴大小即是2^16.
						前綴書寫: 133.43.0.0/16		--	16是網絡部分長度。

					因爲僅從IP地址無法得知前綴的長度，於是路由協議必須把前綴攜帶給路由器。一般使用很簡單地
				使用長度描述的方式，例如 "/16" ；

					前綴的長度相當於網絡部分中1的二進制掩碼。

					掩碼(mask):掩碼是將輸入位中的特定位設置爲開或關的位組合。

					子網掩碼書寫格式:	133.43.22.1 255.255.0.0

					子網掩碼於IP地址進行AND操作可以提取出網絡部分。

				層次化結構具有顯著的優點和缺點:

					優點:前綴的主要優勢是路由器僅僅根據地址的網絡部分即可轉發數據包，只要每個網絡都有一個
				唯一的地址塊。這種方法可以減少路由器維護路由表的負擔。(使用分層路由)

					缺點1:一個主機的IP地址取決於它位與網絡上的位置。IP地址只可以屬於一個特定的網絡。

					缺點2:層次結構浪費了地址。

				-----------

				子網:

					網絡地址的管理由一個稱爲Internet域名和地址分配機構(ICANN,Internet Corporation for Assigned
				 Names and Number)的非營利性公司負責。在分配IP地址時，將會將地址塊分給ISP或其他公司使用。
					然後有的地址塊被分配了但是IP地址卻並非都使用了，因此地址將被浪費；於是需要一種不同的地址組織。
			
					子網劃分(subnetting):在內部將一個網絡塊分成幾個部分供多個內部網絡使用，但對外部網絡而言仍然是
				單個網絡。分割一個大型網絡得到的一系列結果網絡稱爲子網(subnet)。

					一般情況是在內部網絡使用多個路由器來分成多個不同的LAN，每個LAN一塊合適大小的前綴；這些路由器都
				鏈接到一個外部路由器，這個路由器接入網絡或ISP的入口網關。每個內部LAN都有不同的前綴與不同的子網掩碼，來自
				外部網絡的數據包要進入內部網絡，入口路由器將目標地址與各個LAN的子網掩碼進行AND操作就可以得到正確的網絡
				部分，然後再查表進行路由即可。內部LAN在收到這個包之後也將這個包按照路由表轉發給主機。

					子網的分割並不要求均勻，但每片必須對齊以便可以把較低的任何位用作地址的主機部分。

				CIDR:	---	無類域間路由

					路由聚合(route aggregation):不同地點的路由器可以知道一個給定IP地址的不同大小前綴。然而不是將
				一塊地址分割成子網，而是把多個小前綴的地址塊合併成一個大前綴的地址塊。由此產生的較大前綴地址塊稱作爲
				超網(supernet)，以便有別於地址塊的分割。

					路由器必須記錄包含去往自己子網不同位置的路由表，路由聚合可以有效的減少路由表的長度。

					無類域間路由(CIDR,Classless Inter-Domain Routing):有了地址聚合，IP地址可包含大小不等的前綴。
				同樣一個IP地址，一臺路由器把它當作/22的一部分對待(該地址塊包含2^10個地址)，而另一臺路由器把它當作一
				個更大的/20的一部分對待(其中包含2^12個地址)。這是因爲每個路由器有相應的前綴信息，這就是CIDR。

					最長匹配前綴(longest matching prefix):最長匹配前綴路由提供了有益的靈活性。前綴允許重疊，規則
				是數據包按最具體路由的方向發送，也就是具有最少IP地址的最長匹配前綴。

						例如:

															192.24.0.0/21
						
						舊金山	192.24.12.0/22		紐約	192.24.0.0/19		倫敦	192.24.16.0/20		

					192.24.12.0/22									192.24.8.0/22


						最長匹配前綴的路由方式是:
							一個總的前綴指示把整個地址塊的流量發往倫敦，即192.24.0.0/19；一個更具體的前綴
						用來指示該大前綴(192.24.0.0/19)的一部分(192.24.12.0/22)流量發往舊金山。

						舊金山的地址塊大小爲 2^10 個IP地址；倫敦的地址塊大小爲 2^13 個IP地址。

				-----------

				分類和特殊尋址:

					最開始的IP地址被進行了分類，一共分爲了5類，這種分配稱爲分類尋址(classful addressing)。

					32位

					A類:	1.0.0.0～127.255.255.255		128個網絡，1660萬臺/網絡；
					0	網絡	主機

					B類:	128.0.0.0～191.255.255.255		16384個網絡，65536臺/網絡；
					10	網絡	主機

					C類:	192.0.0.0～223.255.255.255		200萬個網絡，256臺/網絡；
					110	網絡	主機

					D類:	224.0.0.0～239.255.255.255		組播地址
					1110	組播地址

					E類:	240.0.0.0～255.255.255.255		保留地址
					1111	保留地址				
				
					目前IPv4地址已經全部分配完了。

					舊的分類系統中的轉發:

						一個數據包到達路由器後，IP地址副本將右移28位得到4位的類別號；然後16路分支把數據包
					歸納到A，B，C，D，E類，A有8種情況；B有4種情況；C有兩種情況。然後每個類別用掩碼取出8位，16
					位，24位的網絡號，並且有對齊成爲32位字。然後使用網絡號進行查表，A，B表查詢使用索引方式，C
					表則使用哈希算法。查到對應的表項後就可得知路由路線。

					D類地址用於組播。

					IP地址0.0.0.0用於主機在啓動時，這個IP意味着"這個網絡"或"這個主機"。全0的IP地址作爲網絡號指
				的是當前網絡。全1或255.255.255.255的地址用來標識指定網絡中的所有主機，它允許在本地網絡(通常是局域網)
				上廣播。

					127.xx.yy.zz形式的地址保留給迴環測試使用，即計算機本地迴路網絡。發送至這個地址的數據報不放在
				線路上，但是如同入境數據包一樣處理。

				-----------
		
				NAT--------網絡地址轉換:

					NAT的基本思想:ISP爲每個家庭或每個公司分配一個IP地址(或最多分配少量的IP地址)，用這個IP地址來
				傳輸Internet流量。在客戶網絡內部，每臺計算機有唯一的一個IP地址，這個地址主要用來路由內部流量。在一個
				用戶數據報要離開內部網絡發送至Internet時，它必須執行一個地址轉換，把唯一的內部IP地址轉換成那個共享的
				公共IP地址。


					NAT地址轉換的私有地址:

						10.0.0.0～10.255.255.255/8		16,777,216個主機
						172.16.0.0～172.31.255.255/12		1,048,576個主機
						192.168.0.0～192.168.255.255/16		65,536個主機

					除了這些NAT私有地址外，還新加入了一個運營商級的NAT地址塊:

						100.64.0.0/10

					任何網絡可以在內部隨意地使用這些地址，僅有的規則是不允許包含這些地址的數據報出現在Internet上。

					NAT轉換的過程:

						用戶數據包離開內部網絡發往外部網絡時將會穿過一個NAT盒子(NAT box)。NAT盒子將內部的IP
					源地址轉換成一個共享的真實的IP源地址。在轉換過程中，NAT盒子會拆開數據包得到用於傳輸層的TSAP
					號碼，這個號碼是16位字，它指示了連接的開始與結束(TCP/UDP)。TCP/UDP頭中的源TSAP將被一個索引值
					替換，目標TSAP不變；NAT盒子建立一個表項，表項記錄了這個數據包的內部源地址，連接的TSAP與替換
					的索引值。然後NAT盒子重新計算校驗和打包新的數據包。再收到來自外部的數據包時，NAT盒子將拆開數
					據包查看索引，然後使用這個索引在內部尋找表項；然後還原源端的TSAP再根據源端的內部IP地址進行轉發。

					內部可以主動向外部主機建立連接，但是外部主機無法主動同內部網絡主機建立連接。建立這種連接需要特
				殊的配置技術或者NAT穿越(NAT traversal)技術。

					NAT轉換可以暫緩IP地址不夠用的問題，但是也引入了其他許多問題:

						1>NAT違反了IP的結構模型；
						2>NAT打破了Internet的端-端的連接模型；
						3>NAT將Internet從一個無連接網絡改變成了一個面向連接網絡特有的形式；
						4>NAT違反了最基本的協議分層規則；
						5>在Internet上的進程不使用TCP與UDP時，NAT將無法正常工作；
						6>有些應用以規定的方式使用多個TCP/IP連接或者UDP端口；
						7>TCP Source port字段長16位，所以最多只可以有65536臺機器可以被映射到同一個IP。
		
	--------
	
	IPv6:

		IPv6協議是新的IP協議，與IPv4不同。

		IPv6的目標:

			1>即使地址空間的分配效率不高，也能支持幾十億臺主機；
			2>降低路由表的大小；
			3>簡化協議，是路由器更快速地處理數據包；
			4>提供更好地安全(認證和隱私)；
			5>更加關注服務類型，特別是針對實時數據；
			6>輔助指定範圍內的組播；
			7>主機漫遊時無須改變地址；
			8>允許協議向未來演進；
			9>允許新老協議共存多年；

		IPv6保持了IP的優良特性，丟棄或削弱了IP中不好的特性，並且在必要的地方增加了新的特性。IPv6與IPv4不兼容；但是它
	與其他一些輔助性的Internet協議則是兼容的，比如 TCP，UDP，ICMP，IGMP，OSPF，BGP，DNS等。

		IPv6的主要特性:

			1>比IPv4更長的地址，有128位長；
			2>對頭進行了簡化，只包含7個字段；
			3>更好地支持選項；
			4>安全性方面的它改進；
			5>服務質量的改進；

			IPv6頭結構:

				固定頭，必須的。

			bit				32位

				4		8			20
				版本		區分服務		流標籤
					16			8		8
					有效載荷長度		下一個頭	跳數限制
							32
							源地址(16字節)
							32
							目標地址(16字節)


				版本:IPv6的版本字段總是6；
				區分服務:(最初稱爲流量類別)主要用途時區分數據包的服務類別；
				流標籤:爲源端和接收方提供了一種建立僞連接的方式，即源端和接收方把一組具有同光需求並希望
				得到網絡同等對待的數據包打上標記。
				有效載荷長度(Payload length):指出緊跟在頭之後的數據部分的長度；
				跳數限制:數據包在網絡中的生存時間長度，每經過一個節點遞減1；
				源地址:IPv6使用了128位的IP地址其大小是 2^128，表示方法是:16個字節分8組書寫，每一組4個十六
				進制數字，組之間用冒號隔開；
						例如 8000:0000:0000:0000:0123:4567:89AB:CDEF ； 
						地址內部有多個0時有三種優化方法:
							1，在一組內可以省略前導0；0123 -> 123
							2，16個0構成的一個或多個組可以用一對冒號代替
								8000::123:4567:89AB:CDEF ；
							3，IPv4地址也可以寫成IPv6的格式
								::192.31.20.46 ；
				目標地址:同源地址；

			原來IPv4中存在的校驗和字段也被去掉了，因爲計算校驗和會極大地降低性能。大多數網絡是可靠網絡，而且數據鏈路
		層與傳輸層都有它們自己的校驗和。

		-----------
		
		擴展頭:

			IPv6引入了(可選的)擴展頭(extension header)概念，這些擴展頭用來提供一些額外的信息，但是它們使用一種更有效的
		方式進行編碼。

			IPv6擴展頭:

				擴展頭			描述
		
				逐跳選項		路由器的混雜信息
				目標選項		給目的地的額外信息
				路由			必須訪問的鬆散路由器列表
				分段			管理數據報分段
				認證			驗證發送方的身份
				加密安全有效載荷	有關加密內容的信息

			有些擴展頭有固定的格式，其他的擴展頭包含數目不定的可變長度選項。對於所有這些可變選項，每一項都被編碼成一個
		(Type,Length,Value)三元組。
			Type字段佔1字節，它指明選項類型；其前2位告訴路由器如果不知道如何處理該選項時應該如何處置數據報。
				選擇方案:
					跳過此選項；	
					丟棄該數據包；
					丟棄該數據包並返回一個ICMP數據包；
					丟棄該數據包，但是對於組播地址不發送ICMP；
			
			Length字段佔1字節，它說明Value字段多長(0--255個字節)。

			Value字段可達255個字節，它是任何擴展頭所需要的信息。

			
				逐跳頭(hop-by-hop header):用來存放沿途所有路由器必須要檢查的信息。
					大型數據包的逐跳擴展頭:
	
					下一個頭	0	194	4
						巨型有效載荷長度
				
				目標選項擴展頭(destination options header):用於那些只需被目標主機翻譯的字段。IPv6的
				初始版本中，唯一定義的選項是空選項(null option)。利用空選項可以將當前頭拉長到8字的
				的倍數。

				路由擴展頭:列出了在通向目標的途中必須要經過的一臺或多臺路由器。
					路由擴展頭:

					下一個頭	擴展頭長度		路由類型	剩餘段數
								特定類型的數據

					它的前4字節包含了4個單字節整數。路由類型(Routing type)給出了該擴展頭剩餘部分
				的格式。類型0表示第一個字後是一個保留的32位字，然後是一定數量的IPv6地址。剩餘段數(
				Segments left)記錄了在地址列表中還有多少個地址尚未被訪問。

				分段擴展頭(Fragment header):涉及分段相關，其處理方式類似IPv4，擴展頭保存了數據報的標
				識符和分端號以及後面是否還有更多分段的標誌。不同的是IPv6中只有源主機才能分段。

				認證擴展頭(Authentication header):提供了一種讓數據包接收方確定發送方身份的機制。
				
				加密安全有效載荷擴展頭(Encrypted security payload header):使得有可能對數據報的內容進行
				加密。

	--------

	Internet控制協議:

		-----------

		ICMP	---	Internet控制消息協議:

			當路由器在處理一個數據報的過程中發生了意外，可使用這個協議向源端報告有關事件；ICMP還可以用來測
		試Internet。

			ICMP消息類型:

				消息類型			描述

				目的地不可達			數據報無法傳遞
				超時				TTL字段減爲0
				參數問題			無效的頭字段
				源抑制				抑制包
				重定向				告知路由器有關地理信息
				回顯和回顯應答			檢查一臺機器是否活着
				請求/應答時間戳			同回顯，但要求時間戳
				路由器通告/懇求			發現附近的路由器

			已定義的ICMP消息大約有10多種，每一種消息都封裝在一個數據包中。

		-----------

		ARP	---	地址解析協議:

			主機在網絡中廣播一個請求某一IP地址的主機的請求包，每個收到該請求包的主機都將檢查自己的IP地址，符合
		請求的IP地址的主機將會使用自己的以太網地址來應答。

			地址解析協議(ARP,Address Resolution Protocol):將IP地址映射爲LAN中的以太網地址。
			ARP請求包中基本包含了請求主機的映射與被請求的主機的IP。

			網絡中的主機針對ARP請求會生成ARP記錄；例如A請求B的以太網地址，在收到應答後將會在內部生成一條會超時
		的記錄(B中也會保存A的ARP記錄)。在超時時間內，發往B的數據包將使用這個記錄來轉發至對應的以太網NIC上(即主機B)。

			爲了提高ARP的效率，協議將設置成:在一臺新的終端加入到網絡中時，它會向廣播地址發送一個ARP請求找到它
		自己的IP地址。當然不會由主機會應答，但是其他主機收到這個廣播的請求包時將會被動的向自己的記錄中加入這個新
		終端的ARP映射記錄。

			假如有兩個網絡 A，B；它們互相連接，邊界路由器爲A與B。


				A1	A	--	B	B1


				如果B中的主機B1希望給主機A1發送數據包，A1與B1不在同同一個網絡中。

				情況1:
					B1知道A1不在同一網路；於是它會將數據包發送給默認路由器，即默認網關(Default gateway)，
				默認網關有網絡中的最低IP地址。首先B1會發送ARP請求默認網關的地址，然後將數據包發送給默認網關B。
				B在收到這個數據包後，得知應該轉發給A1；但是它不知道A1的以太網地址，於是它生成ARP報文，向A詢問
				A1的地址。

				情況2:

				ARP代理(proxy ARP):
					在B1不知道A1不在同一個網絡中時，此時路由器A可以用自己的以太網地址來迴應B1的ARP請求。之後B1
				將發往A1的數據包都發往A，A再轉發給A1.

				反向ARP映射:
					即以太網地址映射至IP地址。

		-----------

		DHCP	---	動態主機配置協議:

			DHCP,Dynamic Host Configuration Protocol.

			由一個DHCP服務器來負責分配與回收網絡中的IP地址，終端使用DHCP客戶端向DHCP服務端請求IP。

			DHCP服務器分配的地址有有效期限制，在超時後將會被回收，這種技術稱爲租賃(leasing),所有使用DHCP服務的主機都
		需要在地址過期之前向服務器請求續訂。如果沒有提出續訂請求或請求被拒絕，主機將無法再使用之前分配給它的IP地址。

			DHCP	RFC 2131 2132

			DHCP除了可以管理地址之外，還可以爲主機配置其他各種參數。

		-----------

		標籤交換和MPLS:

			多協議標籤交換(MPLS,MultiProtocol Label Switching):常被用在ISP網絡之間移動流量，使用MPLS的網絡將會使用類似
		虛電路一樣的轉發方式；並且每個在轉發的數據包都會加上對應的MPLS標誌。

			使用IP，MPLS，PPP傳輸一個TCP段:

				PPP	MPLS	IP	TCP	用戶數據	CRC
					||
					||
			bit		20	3	1	8
					標籤	QoS	S	TTL
	
			在MPLS網絡中傳輸時，包會被加上一個MPLS頭；它介於IP和PPP之間。它不是一個真正的第三層協議，因爲它依賴IP或
		其他網絡層地址來建立標籤路徑；但它也不是一個第二層協議，因爲它可以多跳轉發。
			
			標籤:存放了索引；
			QoS:服務類別；
			S:涉及在層次網絡中疊加多個標籤的方法；
			TTL:數據包跳數；


			基本工作方式:

				當一個MPLS增強型數據包到達一個標籤交換路由器(LSR,Label Switched Router)，標籤就被用作一個查表索引。
			依照索引來確定出境線路和新標籤。標籤只有本地意義；兩個LSR可以有兩個或多個相同的標籤但是有不同的意義。爲了
			在虛電路的另一端能區別出這兩個數據包，標籤必須在每一跳進行重新映射。

				標籤何時附加到數據包中？
					因爲大部分主機與路由器不理解MPLS，於是只有在一個IP數據包到達MPLS網絡邊緣時才添加標籤。
				標籤邊緣路由器(LER,Label Edge Router)檢查數據包的目標地址和其他字段來確定該數據包應遵循哪一條
				MPLS路徑，然後將標籤貼在數據包前面。在數據包被加上標籤進入MPLS網絡後，就使用MPLS來轉發。再數據
				包將要離開MPLS網絡時，LER將刪除標籤。
					
			可以爲每個流設置MPLS，但是這樣會浪費資源，於是大部分都是多個流共享一個標籤。即流組合起來使用1個標籤。這
		些被合起來共享同一個標籤的流稱爲屬於同一個轉發等價類(FEC,Forwarding Equivalence Class)。這個類別不僅覆蓋了轉發
		規則，還覆蓋了服務類別。

			MPLS轉發表的建立:

				MPLS由ISP內部設置，設置時不涉及用戶。這一點與VC不同。轉發信息由一些協議設置，這些協議一般是路由
			協議和連接建立協議的組合。這樣分離了控制協議與標籤的轉發，因而提供了可以使用多個不同控制協議的便利。
				工作方式的一種變種是:路由器啓動時先查看自己是哪些路由的最終目的地；然後它爲這些路由創建一個或
			多個FEC並且爲每個FEC分配一個標籤，然後把這些標籤發給其鄰居。反過來，這些鄰居在自己轉發表中添加這些標籤，
			再把新標籤發送給其鄰居，直到FEC路徑建立。

		-----------

		OSPF	---	內部網關路由協議:

			AS使用在其內部的路由算法，域內路由算法(intradomain routing)。

			早期的域內路由算法採用了距離矢量的設計思想，路由信息協議(RIP,Routing Information Protocol)是當時運行的
		一個例子。小型網絡RIP可以勝任，但是隨着網絡規模的增長，RIP的工作性能將下降；並且有無窮計數問題，且收斂慢。

			開放最短路徑優先(OSPF,Open Shortest Path First)，它借鑑了另一個稱爲中間系統到中間系統(IS-IS,Intermediate-
		System to Intermediate-System)的協議。

			OSPF設計必須支持的要求:
				1>算法開源；
				2>支持多種距離度量；
				3>必須是動態算法；
				4>必須支持基於服務類型的路由；
				5>必須實現均衡負載；
				6>必須支持層次化系統；
				7>要求提供適度的安全性；
				8>能處理隧道；

			OSPF同是支持點到點鏈路和廣播網絡。

			OSPF的基本工作方式本質:
				
				將一組實際網絡，路由器和線路抽象到一個有向圖中，圖中每條弧(路由器到路由器的PP鏈路)由一個權值。
			每個方向上一條，權值可以不同。廣播網絡與路由器都用一個節點表示，從網絡節點到路由器節點之間的弧段權值爲0。
			這種結構使得路由器可以到達主機但無法穿過主機。



			首先構建有向圖，然後每個路由器使用鏈路狀態方法計算從自身取往其他節點的最短路徑。OSPF將記住最短路徑
		集合，並在報文轉發期間分攤流量至這些路徑上。這種方法稱爲等價成本多路徑(ECMP,Euqal Cost MultiPath)。

			OSPF可以將AS劃分成區域並編號，區域不能重疊，全部屬於一個區域的路由器稱爲內部路由器(internal router)。每個AS
		由一個骨幹區域(Backzone area)，稱爲0號區域。所有區域都鏈接到0號區域，所以從AS中的任何一個區域出發經過0號區域都可以
		到達任何一個區域。
			每個鏈接到兩個或更多區域的路由器稱爲區域邊界路由器(border router)，它必須是骨幹網的一部分。區域邊界路由器
		的任務是概括本區域的目的地信息並注入到與其相連接的其他區域。概括包括成本信息但沒有拓撲細節。只有一個邊界路由器通往外
		部時，甚至路由信息概要都不需要傳遞。於是這類區域稱爲存根區域(stub area)。

			AS邊界路由器(AS boundary router):把通往其他AS的外部路由注入到本區域。

			OSPF的5類消息:

				消息類型			描述
		
				HELLO				用來發現所有的鄰居
				LINK STATE UPDATE		提供發送者到其鄰居的成本
				LINK STATE ACK			對鏈路狀態更新消息的確認
				DATABASE DESCRIPTION		聲明發送者的鏈路狀態更新情況
				LINK STATE REQUEST		請求鏈路狀態信息

			OSPF協議需要在鄰接的路由器之間相互交換信息才能工作，鄰接(adjacent)路由器不同於鄰居路由器。爲了避免LAN種的
		每臺路由器進行交換路由信息的低效率，OSPF要求從每個LAN中選出一臺路由器作爲指定路由器(designated router)。指定路由器
		與LAN上的所有其他路由器是鄰接的，並且與它們交換信息。
			正常操作過程中，每臺路由器週期性地泛洪LINK STATE UPDATE消息至它的每臺鄰接路由器。這些消息給出它的狀態信息，
		並提供了拓撲數據庫用到的成本信息，路由器根據消息的時間來更新信息。在一條線路啓用，停止或其成本發生改變時，路由器都要
		發送LINK STATE UPDATE消息。

			DATABASE DESCRIPTION消息給出了由發送方持有的所有鏈路狀態表項的序號。通過比較來自對方的和自己的序號即可得知
		誰擁有最新值。

			LINK STATE REQUEST消息用來在每一對鄰接路由器中任一個來向對方請求鏈路狀態消息。這個算法的結果是每一對路由器都
		可以檢查誰有最新數據，新消息就是以這種方式傳播的。

			通過泛洪，所有路由器都能構建出其所在區域的拓撲圖，並計算最短路徑。
	
		-----------

		BGP	---	外部網關路由協議:

				AS內部使用IS-IS/OSPF。AS之間則會使用另一個協議，邊界網關協議(BGP,Border Gateway Protocol)。AS內部
			可以選擇不同的內部網關協議，但是AS之間必須選擇相同的外部網關協議。

			中轉服務(transit service):骨幹網ISP向普通ISP提供流量中轉。

			Internet交換點(IXP,Internet eXchange Point):同各個ISP連接的鏈路。

			多穴尋址(multihoming):例如一個公司的多個網絡連接到多個ISP。這種技術可用來提高可靠性，因爲有多個路徑。

			BGP:它是距離矢量協議的一種形式，但它與域內距離矢量協議有很大的不同。BGP不僅會維護到每個目的地的成本，而且
		每個BGP路由器還跟蹤所使用的路徑。這個方法稱爲路徑矢量協議(path vector protocol)

			BGP的基本工作:

				每個BGP路由器從與它連接的下一個ISP路由器學習如何到達給定目的地的路由，也可以從所有其他邊界路由器處
			學習到給定目標的路由。
				首先路由選擇取決於ISP，一般共同策略有:

					1>優先使用對等網絡的路由，而不是通過中轉提供商的路由；
					2>或使用"短路徑更好"作爲默認規則；
					3>優先選擇具有ISP內最小成本的路由；或稱提前退出(early exit)/熱土豆路由(hot-potato routing)，
					它的副作用是使得路由呈現不對稱性。

		-----------

		Internet組播:

			Internet中D類地址被用來組播。

			一般本地LAN中的組播地址有:

				224.0.0.1	LAN上的全部系統
				224.0.0.2	LAN上的全部路由器
				224.0.0.5	LAN上的全部OSPF路由器
				224.0.0.251	LAN上的全部DNS服務器

			也有組成員在其他網絡上，此時需要一個路由協議。首先組播路由器必須瞭解哪些主機屬於某個組成員。
			一個進程可以要求主機假如組，也可以要求它離開組。每臺主機跟蹤記錄當前它的哪些進程屬於哪些組。當一臺主機上的
		最後一個進程離開一個組時，該主機就不再屬於這個組。時間週期大概1分鐘，每個組播路由器向它所在LAN上的所有主機發送一個
		查詢數據包，要求主機報告所屬組。組路由器可以與標準路由器分離，也可以合併。每個主機收到查詢後，返回一個響應包，其中
		包含了自己感興趣的所有D類地址。		--	這種機制稱爲 Internet組管理協議(IGMP,Internet Group Management Pr-
		ptocol).

			組播路由協議可以用來構建組播生成樹。

			AS內主要使用的是協議獨立組播協議(PIM,Protocol Independent Protocol).
			它適應的場合有:
				
				密集模式PIM；這種模式中算法會創建一顆修剪的逆向路徑轉發生成樹，這顆樹適合組成員分佈在網絡各處的情況。

				稀疏模式PIM；這個模式中算法會創建類似核心樹的生成樹。這種方式適合內容分發服務提供商向它IP網絡上
				的用戶組播TV，這種設計的一種變體特定源組播PIM（Source-Specific Multicast PIM)可用來優化只有一個發送
				方的情況。

				當組成員分佈在不止一個AS需要BGP或隧道組播擴展來創建路由。

		-----------

		移動IP:

			一般工作模式就是 轉交地址，家鄉地址，家鄉代理。

			針對IPv4的移動IP解決方案是，允許主機外出使用自己的IP地址與網絡連接；但是移動主機必須要發現自己正在移動。
		通過ICMP路由器通告(advertisement)和懇求(solicitation)消息可以做到這一點。移動主機會定期監聽路由器的通告報文或
		通過懇求報文來發現附近的路由器。同樣的機制可以使得移動主機發現它們的家鄉代理，從而確定自己從外地返回了。

			一般獲取轉交地址都會使用DHCP服務。如果IP地址不夠，則需要使用外地代理，前提是有外地代理在網絡上。找到外地
		代理或得到IP地址後，移動主機即可與家鄉代理通信來報告自己的位置。

			在移動主機外出時，家鄉代理會使用ARP代理的方式來攔截發往移動主機的報文。而移動主機的位置由它自己或外地代理
		得知。並且移動主機在離開與返回時都會導致家鄉代理快速更新ARP映射。(使用免費ARP)

			然而移動IP有兩個麻煩:

				1>使用NAT盒子的數據包；而隧道中沒有使用這些頭。對此的解決方法是改變封裝，使得封裝後的數據包包括UDP頭。

				2>ISP檢查源IP地址；入口過濾(ingress filtering)。它是一種安全措施，用來檢查數據包是否匹配路由協議認可的
				應該出現的位置。路由器會丟棄看似不正常的數據包來防止惡意流量。解決方法是使用轉交地址將應答數據包通過
				隧道轉發到家鄉代理。

			最後有個問題是家鄉代理如何時別移動主機請求的身份。解決方法是使用雙向認證方法。


---------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------------------------

