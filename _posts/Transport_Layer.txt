									傳輸層

		傳輸層介於網絡層與應用層之間，它與網絡層一起構成了網絡協議層次的核心。
		傳輸層的目標是:在無連接的基礎上提供面向連接的服務。
		傳輸層通常被集成在操作系統中；它的最終目標是向它的用戶提供高效的，可靠的，成本有效的數據傳輸服務。操作系統使用傳輸層提供的
	服務原語或接口來使用它的功能。在傳輸層內，完成這項工作的硬件和/或軟件稱爲傳輸實體(transport entity)。可能是內核中的一個模塊，或一個
	鏈接庫，或以獨立的用戶進程運行，或實現在NIC上。下4層稱爲傳輸服務的提供者(transport service provider)，再上層可視爲傳輸服務的用戶(
	transport service user)。

		傳輸層協議:

			TCP;
			UDP;DCCP;
			RTP;RTCP;
			...

		傳輸層接口:套接字；

		傳輸層的功能:

			連接的建立與釋放；
			網絡擁塞處理；
			差錯控制；
		
		延遲容忍網絡:DTN

		性能相關:網絡設計與行爲控制；


	傳輸服務原語:

			簡單的傳輸服務原語:

				原語			發出的包		含義
			
				LISTEN			無			阻塞，直到某個進程試圖與之建立連接
				CONNECT			CONNECTION REQ		主動嘗試建立一個連接
				SEND			DATA			發送信息
				RECEIVE			無			阻塞，直到到達一個DATA包
				DISCONNECT		DISCONNECTION REQ	請求釋放連接

			傳輸實體之間傳送的數據稱爲段(segment)，舊名稱是傳輸協議數據單元(TPDU,Transport Protocol Data Unit)

			這些服務原語一般都集成在OS中的套接字接口上。

			連接管理方案:

					收到連接請求段		IDLE		-連接原語-

						PASSIVE					ACTIVE
						ESTABLISHMENT				ESTABLISHMENT
						PENDING					PENDING

							執行連接原語		收到連接接收段	

				服務器:				ESTABLISHED				:客戶端

							收到終止連接請求段	執行終止連接原語

						PASSIVE					PASSIVE
						DISCONNECT				DISCONNECT
						PENDING					PENDING

							執行終止連接原語	收到終止連接請求段

								IDLE

			NSAP:Network Service Access Point.網絡服務訪問點；相當於主機IP(它是網絡層上的訪問點)。

			TSAP:Transport Service Access Point.傳輸服務訪問點；俗稱端口(port)。它是傳輸層的訪問點，使用時需要與NSAP綁定。


	套接字Socket:

			Berkeley 套接字，首次發佈在1983年，它被UNIX作爲Berkeley UNIX4.2 BSD軟件的一部分。windows上也有類似的套接字
		接口--winsock.

			Socket可以認爲是集成在OS中的傳輸層接口，使用Socket可以調用傳輸層的功能。

			TCP套接字原語:

				原語				含義

				SOCKET				創建一個信通信端點
				BIND				將套接字與一個本地地址關聯
				LISTEN				聲明願意接收連接；給出隊列長度
				ACCEPT				被動創建一個入境連接
				CONNECT				主動創建一個連接
				SEND				通過連接發送一些數據
				RECEIVE				從連接上接收一些數據
				CLOSE				釋放連接

			套接字模型中，連接的釋放是對稱的，即是每一方都要聲明放棄連接，執行相應原語。放棄的一方將不能發送數據給對方，但是
		可以接收來自對方的數據。套接字與TCP協議結合向用戶提供了一種稱爲可靠字節流(reliable byte stream)的面向連接服務。

			RFC 4960 - 流控制傳輸協議(SCTP,Stream Control Transmission Protocol)，結構化流傳輸(SST,Structured Stream Transport)

			SCTP與SST提供了有效並簡單地管理一組流的相關方案。

			服務器的套接在首先要使用BIND將NSAP與TSAP綁定，否則外部主機將無法訪問主機端口與傳輸實體通信。客戶端不需要BIND，因爲
		它是連接發起的一方。

			端口映射器(portmapper):客戶主機無法得知服務器上服務進程使用的端口時，先於端口映射器建立連接；然後端口映射器返回服務
		進程的端口，客戶端再重新與服務進程建立連接。

			進程服務器(process server):它負責監聽一組端口，而其他進程則進入休眠。當新的連接到來時，它便調用對應的服務進程，將到
		來的連接交付至其處理。

	連接的建立:

			傳輸層的連接建立採用的三次握手方法，目的是避免因REQ被網絡延遲而導致的而二次連接。
			REQ中含有序號，用來檢查是否是過期請求或重複請求。且序號作爲段的標籤可以使得該段在一定時間內不被重用。序號的分配方式
		是，在建立連接時，將會採用時鐘的低k位用於序號，但是時鐘的位數必須是大於或等於k。這個方法可以解決機器崩潰後內存記錄丟失的問題。
		因爲選擇的這個時鐘在機器崩潰後也不會停止，即一個日時鐘(time-of-day clock)。

			PAWS:Protection Against Wrapped Sequence numbers.防止序號迴繞。TCP使用三次握手建立連接，連接期間時間戳被用來輔助
		擴展32位序號，以便它在最大數據包生存期間不會迴繞。PAWS是對這個機制的修復，防止在高速鏈路上的序號迴繞過快。

			在連接建立初期，雙方會選擇初始序號並互相確認。


		三次握手:

			有傳輸實體A，B；建立連接時採用三次握手:

					A				B
			
				T1		->CR(seq=T1）			T7

				T2			ACK(seq=T8,ACK=T1)<-	T8
		
				T3		->DATA(seq=T1,ACK=T8)		T9
				
				T4						T10


			CR-ConnectRequest.

			基本的三次握手步驟。

			有其他特殊情況:

				假若T1的CR被延遲重傳，B收到CR1之後向A又發送了一個ACK，其中ACK是前一個時間。此時A在收到這個ACK後發現這個請求
			已經過期了，於是A會向B發送REJECT(ACK=T1) 來拒絕舊的重複的請求。

				假若T1的CR被延遲重傳，B在收到CR2後正常的同A建立連接；但是A的DATA段卻被延遲了，A的DATA2重傳段到達後，B將對這
			個段確認；在DATA1到達B後，B會注意到其中的序號已經被確認過了，於是當作重複段丟棄。T1被延遲的CR1到達B後，B還是同上面的
			情況一樣發送確認，A同樣回複REJECT。

	連接的釋放:

			一般連接的釋放都是對稱的，但也有例外，比於Web服務器與客戶端之間的連接。Web服務器可以在傳送完數據後單方面切斷連接，可以
		這樣做的原因是Web服務器知道數據的傳輸模式。類似的還有ssh等RPC調用。

			對稱的連接釋放:

				假若A與B建立了連接，現在要釋放連接:

					A發送DR消息，B收到該消息後將返回確認且也發送自己的DIS消息至A；A收到返回的確認，同時也收到B的DR消息，
				於是也向B返回一個確認。之後雙方退出連接。

					然後這些DR段與ACK段都有可能回丟失；那麼此時是無法以對稱的方式釋放連接的。
					A的DR丟失後會重傳，重傳有次數限制，超過會直接放棄連接。此時可能導致半開連接，關閉半開連接的方式是:
						如果在規定時間內沒有段到來，該連接將被自動段開。檢測連接活性的方式就是發送啞段，接收方收到
					這個段後會返回確認。超時後連接將被關閉。

				於是可以得知，傳輸層用戶必須參與近來決定何時斷開連接，這個問題單靠傳輸實體無法徹底解決。

	差錯控制和流量控制:

			CRC被經常使用在上層協議中，傳輸層的差錯控制也使用CRC來檢錯。
			滑動窗口與自動重複確認(ARQ)不僅使用在數據鏈路層，還被使用在傳輸層。

			傳輸層不僅有一個針對雙發處理速率的流量控制機制，還有個針對網絡擁塞的流量控制機制，網絡擁塞解決被設計在TCP協議中。

			傳輸層也是同數據鏈路層一樣，收到一個段後會返回一個對段的確認。
			傳輸層也使用滑動窗口來控制流量與緩衝數據段。因爲TCP連接的話需要保證有序提交，於是需要緩衝區。不過相比於固定的緩衝區，
		傳輸層可以動態的分配緩衝區，並且可以實現緩衝與確認機制分離。

			動態緩衝區也是一個滑動窗口，初始時傳輸實體會向OS申請一定的緩衝區內存。並且數據傳輸方會向對法發送自己的參數，它期望
		對方能夠緩衝若干個段。接收方在收到期望值後，檢查自己是否可以滿足要求；無法滿足就返回自己擁有的緩衝區大小，發送方收到這個值
		後會記錄爲可發送的滑動窗口大小。接收方在提交數據後會向發送方發送空出來的緩衝區數量，這個值被攜帶在返回的確認段中，發送方之
		後會再更新滑動窗口的大小。
			滑動窗口只要滿了，那麼發送方就會被阻塞。對應的接收方的窗口滿了，它就會向發送方發送暫停。

			緩衝池的組織方式:可以使用鏈式緩衝池，可爲每個連接分配一個單元，單元中再存放各個連接的緩衝區連表。

			連接之間的死鎖:即帶有新緩衝區數量的值的段丟失了，導致發送方無法更新滑動窗口。
			解決辦法是使用控制段，每臺主機應該定期地在每個連接上發送控制段，控制段能觸發對方連接的緩衝區檢查操作；對方會傳送自己
		的緩衝區大小等狀態信息。

	多路複用:

			多路複用:一個NSAP給主機的多個TSAP使用；
			逆向多路複用:主機的一個TSAP使用多個NSAP；

			一般的套接字就是普通的多路複用。逆向多路複用的一個例子就是SCTP協議，SCTP可以把一條連接運行在多個NSAP上。

	崩潰恢復:

			主機在崩潰後會丟失相關連接的信息，需要同連接的對方重新同步。

			一般有兩個狀態:

					S1:發出了一個段，但尚未被確認；
					S2:沒有未完成的段；

			客戶端根據這兩個狀態，選擇是否重新傳輸前一個段。

			然而第k層上的崩潰恢復需要k+1層來協助完成。
			因爲根據不同的情況，單獨恢復很困難，因爲需要的信息不夠。即便是改變崩潰前的操作序列，還是會有不同的情況下，協議的
		工作會不正常。

			端-端的連接意味着，在收到了來自對方的確認後，就意味着工作完成。本地主機上的後續提交不與對方有關係。

	擁塞控制:

			網絡的效率與功率；

			網絡的效率體現在實際吞吐量；網絡的功率體現在於負載與延遲情況。

			在合適的功率內，網絡正常運行，效率也得到保證。在超過某一臨界點的功率之後，網絡效率急速下降，網絡擁塞開始。

				功率-負載/延遲

			最大-最小公平性:

				使用在多個傳輸實體中劃分帶寬，好的劃分帶寬的方法有利於提升網絡的效率。一條鏈路上的帶寬是有限的，如果分配給
			某個連接更多的帶寬，將引起帶寬分配失衡，比於給一個郵件提交連接更多的帶寬，而給文件傳輸或視頻通信等更少的帶寬。這將
			會降低網絡的效率。

				最大-最小公平性的基本思想是:如果分配給一個流的帶寬在不減少分配給另一個流帶寬的前提下無法得到進一步增長，那麼
			就不給這個流更多的帶寬。

			傳輸層的帶寬分配，一般是給予多個連接的流更多的帶寬；於是會出現有的應用開多個連接以此獲得更高的帶寬的情況。

			收斂速度:

				同路由算法一樣，什麼時後帶寬劃分方案可以在幾個流之間穩定下來。比如三個流中某一個流離開後，那麼擁塞控制算法劃分
			新的公平而有效的帶寬分配收斂要多久。過慢的話將會導致有空閒的帶寬從而降低了效率。

			調整發送速率:

				這個同樣同於鏈路層的流量控制，但這裏的是傳輸實體。太快的發送將導致緩衝區快速消耗，於是發送方可能會陷入較長時間的
			阻塞。而且在網絡容量不足時，快速的突發流量將增加網絡負擔。

				有效調整發送速率的方法有多種:

					顯式擁塞協議(XCP,eXplicit Congestion Protocol)；顯式並精確，精確告知發送方應使用的速率。

					顯式擁塞通知(ECN,Explicit Congestion Notification);顯式但不精確。

					ECN不僅被使用在網絡層，還被加入了TCP設計中。

				一般擁塞控制機制信號:

					協議		信號		顯式否		精確否

					XCP		使用速率	是		是
					TCP		擁塞警告	是		否
					FAST TCP	端-端延遲	否		是
					Compound TCP	丟包或端-端延遲	否		是
					CUBIC TCP	丟包		否		否
					TCP		丟包		否		否

				Linux下一般使用CUBIC TCP
		
				Windows下一般使用Compound TCP

				
				速率控制法則:

					AIMD:Additive Increase Multiplicative Decrease.加法遞增，乘法遞減。

					AIMD是常用的速率控制法則，它的工作方式是:

						每個使用一個固定的增量來隨時間線形增加速率，再超過了網絡中的一個速率閥值之後，以乘法來減慢發送的
					速率。然後再重新線形增加，如此反覆。

				TCP中使用AIMD的思想來實現速率控制，但是並非直接調整速率，而是調整滑動窗口。

		無線問題:

			採用AIMD，較高的吞吐量要求非常小的數據包丟失。但是無線鏈路環境差，丟包頻發。沒有保護測量措施的話，把丟包率作爲一個
		信號的擁塞控制方案將把運行在無線鏈路上的連接壓制到非常低的速率個。

			爲了在無線網絡中正常工作，擁塞控制算法觀察到的丟包只能是那些因帶寬不足造成的丟包，而不能是因爲信號傳輸錯誤造成的丟包。
		解決這個問題的方法就是掩蓋錯誤，通過使用無線鏈路的重傳機制，使傳輸實體無法得知已經丟包。

			然而需要一種方法來分開鏈路層的幀的重傳與傳輸層的擁塞控制。

			解決方法是在兩個不同層次中使用不同的時間尺度，鏈路層的重傳發生在微秒到毫秒級；而傳輸層的丟失計數器發生在毫秒到秒。
			
			
	UDP:

		UDP:User Datagram Protocol.用戶數據報協議。

		UDP頭:

						32位
				16				16
				源端口				目標端口
				16				16
				UDP長度				UDP校驗和		

		源端口與目標端口即雙方的TSAP；
		UDP長度字段包含8字節的頭和數據部分兩部分的長度。
		UDP校驗和，這個字段是可選的，它提供額外的可靠性。它校驗頭，數據和一個概念性的IP僞頭。校驗算法使用的是16位字的補碼相加再取
		結果補碼。計算時如果數據部分是奇數位則使用0填充成偶數位。

			
		IPv4僞頭:

						32位

						源地址

						目標地址
				8		10		14
				00000000	協議號=17	UDP長度

		源地址與目標地址即雙方的32位IP地址。
		協議號=17，UDP協議號17；
		UDP長度，UDP段(包括頭)的字節計數。

		UDP協議未提供流量控制，擁塞控制，重傳等機制；它只提供了一個與IP協議的接口。這些未提供的機制可以有應用層程序實現。

		遠程過程調用:

			RPC:Remote Procedure Call.遠程過程調用。
		
			它的一個例子就是SSH，只是SSH使用的是TCP連接。客戶端提供請求，然後服務器在其本地調用過程然後返回結果。過程可以認爲是
		一個函數或者一個程序。

			爲了進行調用，客戶程序必須綁定(鏈接)到一個小的庫過程，這個庫過程稱爲客戶存根(client stub)；它代表了客戶地址空間中
		的服務器過程。同樣，服務器端也存在一個服務器存根(server stub)。

			列集(marshalling):客戶存根將參數封裝到一個消息中，然後通過系統調用發送該消息。
			散集(unmarshaled):服務器端從向服務器存根中得到來自客戶端的參數。

			一般情況RPC無法傳遞指針，但是使用某個序列可以達到一樣的效果。		
	
			調用序列:

				引用調用(call-by-reference):直接對變量列集，然後引用結果。

				複製-恢復調用(call-by-copy-restore):參數是一個指針指向整數值k，客戶存根對k列集發送給服務器；服務器存根創建指
				針指向k然後傳遞給服務器過程，之後結果將被返回客戶存根並複製進入指向k的指針中。

			然而並非總是可以使用複製-恢復調用，因爲客戶端可能不知道服務器過程需要的參數類型(例如參數是void*，但是過程內部變換)。
		儘量還是避免使用指針的複製-恢復調用。

			UDP的RPC需要應用程序維護重傳計時器。

		實時傳輸協議與實時傳輸控制協議:

			RTP:Real-time Transport Protocol.實時傳輸協議。目的是爲多媒體應用指定一個通用的實時傳輸方案。	
			
			RTCP:Realtime Transport Control Protocol.目的是處理反饋，同步和用戶接口等信息，但不傳輸樣值。

			RTP運行在用戶空間，介於應用層與傳輸層之間。RTP的有效載荷會被封裝在段中進行傳送。

			每個RTP有效載荷可以由多個樣本值，它們可以按照應用系統希望的任何一種方式進行編碼。RTP流中的每個數據包都有一個編號，線形
		遞增。因爲多媒體一般是要求低抖動，而不在乎是否中間缺失了一幀的內容，所以RTP也沒有重傳機制。
			RTP中包含了時間戳設施，可以用來確定流的起始時間，因此只有時間戳之間的差值纔有意義。時間戳機制可以使得接收方做少量的緩衝
		工作，就是預加載資源然後等到播放點來臨時播放。

			RTP頭:

							32位
				2	1	1	4	1	7		16
				版本	P	X	CC	M	有效載荷類型	序號

							時間戳

							同步源標識符
	
							～～～

							分信源標識符

			版本即ver.
			P位表示該數據包被填充到4字節的倍數。
			X位表示有一個擴展頭。
			CC字段指明後面共有多少個貢獻源。
			M位是一個與應用相關的標記位，可用來標記視頻幀的開始或音頻信道中的字的開始。
			有效載荷類型指出編碼算法。
			序號只是個計數器。
			時間戳註明樣本的產生時間。這個值有助於減緩接收端的抖動。
			同步源標識符(Synchronization source identifier)指明該數據屬於哪一個流。使用這個字段可以多個RTP複用至一個UDP流中或者從中分離。
			貢獻源標識符用來標明媒體流的生成源。

			帶緩衝和抖動控制的播放:

				緩衝即播放器使用分配得到的內存來緩衝一段時間的多媒體流資源，等到播放點到達後取出播放並再緩衝。
				
				抖動控制需要考慮的是播放點(playback point)的設置位置，合理的設置播放點可以減少緩衝壓力且降低抖動。當然抖動
			最主要的原因還是延遲，在低帶寬高延遲的連接上可以嘗試提高緩衝時間，即後拉播放點；在視頻或音頻流開始前等待一段緩衝
			時間。
				對於音頻來說，播放中途的細微抖動將不會被察覺，但是如果停下來緩衝則不可取。音頻中只要適應會話峯(talkspurts)之間
			的播放點，即交談中的間隙，可以控制抖動的影響範圍。RTP協議允許設置M標誌位來表示一個音頻會話峯的開始。
			
	

	Internet傳輸協議:TCP

		
			TCP:Transmission Control Protocol.傳輸控制協議；互連網上最常用的傳輸協議。

			TCP服務模型:

				同樣使用兩端的套接字來建立通信。TCP的功能就是在無連接網絡上提供面向連接的服務。
		
				一些分配的端口號(默認):

					端口號		協議		用途

					20，21		FTP		文件傳輸
					22		SSH		遠程登陸
					25		SMTP		電子郵件
					80		HTTP		萬維網
					110		POP-3		訪問遠程郵件
					143		IMAP		訪問遠程郵件
					443		HTTPS		安全的Web(SSL/TLS上的HTTP)
					543		RTSP		媒體播放控制
					631		IPP		打印共享

				知名端口(well-known port)可以向www.iana.org申請；同時這些端口上的服務也支持修改端口。

				所有TCP連接都是全雙工，並且是點到點的；即兩個套接字端點。TCP連接是字節流，不是消息流，端-端之間不
			保留消息的邊界。TCP協議還提供了緊急數據(urgent dat)處理功能，緊急數據可能是一個操作系統信號。

			TCP協議:

				TCP的一個主要特徵就是連接上的每個字節都有自己獨有的32位序號。發送端與接收端以段來交換數據；TCP段由
			一個固定的20字節的頭(加上可選部分)以及隨後0個或多個數據字節構成。TCP允許緩衝數據讀寫，也允許不緩衝讀寫。

				TCP實體使用的基本協議具有動態窗口大小的滑動窗口協議。段的卻認中會附帶接收方當前緩衝區的空閒大小。
			且確認號的值等於接收端期望接收的下一個序號。發送端會在超時計時器超時後重傳。

				TCP頭:

								32位
				16								16
				源端口								目標端口
		
								序號

								確認號
				4	4	1   1   1   1   1   1   1   1			16
				TCP頭長	空	CWR ECE URG ACK PSH RST SYN FIN			窗口大小
						16				16
						校驗和				緊急指針
								選項

								數據(可選)
					
					
					源端口與目標端口即是雙方套接字的端點。
					序號和確認號執行常規功能，不過確認號是下一期望段的序號。類似與數據鏈路層的累計確認。

					TCP頭長度字段指明了TCP頭包含多少個32位字。這個字段是必須的。

					CWR和ECE用作擁塞控制信號。接收方收到擁塞指示後，就設置ECE給發送端發送ECN-Echo信號；發送端收到
					後則設置CWR回複接收端表示已經收到了ECN。

					URG，如果使用了緊急指針就設置爲1.

					ACK被設置爲1表示確認號字段是有效的。

					PSH指出這是被推送(PUSH)的數據。
			
					RST被用於重置一個已經變的混亂的連接。
				
					SYN被用於建立連接過程。
		
					FIN被用來釋放一個連接。

					校驗和提供了額外的可靠性，它的校驗範圍包括頭，數據，以及一個概念性IP僞頭。僞頭的協議號爲6，其他
					同UDP裏的僞頭。

					選項字段提供了一種添加額外設施的途徑；每個選項具有 類型-長度-值 (Type-Length-Value)編碼。其中
					使用最廣泛的就是MSS(Maximum Segment Size)，表示主機願意接受的最大段長。選項長度可變，但必須是32
					位的倍數，不足以0填充。
						時間戳(Timestamp)選項攜帶由發送端發出的時間戳，並被接收端迴應。PAWS根據時間戳來丟棄入境段。

				TCP連接建立與釋放:

						TCP採用三次握手建立連接，採用對稱釋放模型來釋放連接。

				TCP連接管理模型:

						TCP連接管理有限狀態機使用的狀態:

						狀態				描述
	
						CLOSED				沒有活躍的連接或掛起
						LISTEN				服務器等待入境呼叫
						SYN RCVD			到達一個連接請求；等待ACK
						SYN SENT			應用已經啓動了打開一個連接
						ESTABLISHED			正常的數據傳送狀態
						FIN WAIT1			一端沒有數據需要發送
						FIN WAIT2			另一端同意釋放連接
						TIME WAIT			等待所有數據包離開連接
						CLOSING				兩端同時試圖關閉連接
						CLOSE WAIT			另一端已經發起關閉連接
						LAST ACK			等待所有數據包離開網絡

						每一次的狀態的遷移都是由一個事件到來引起的，事件可能是來自對方的數據或請求；或者本地
					主機上的信號。

				TCP滑動窗口:

					TCP上的滑動窗口也同鏈路層的類似，不過以字節爲單位且是動態的。

					TCP在滑動窗口上增加了幾個新機制:

						窗口探測(window probe):這個機制可以用來防止窗口更新段丟失和引起的死鎖。而且窗口探測段
						可以引起接收方重新宣告窗口大小的動作。
						
						延遲確認(delayed acknowledgement):即將確認和窗口更新延遲50毫秒，以等待數據段到來可以以起
						發送。


					TCP滑動窗口的問題是:小數據包併發以及低能窗口綜合症(silly window syndrome)。
					
					小數據包併發:
					
					例如SSH，每次輸入一個字符就回發送一個數據段，然後對方再回複確認。當需要連續輸入時，會併發大量1
					字節的數據段。
				
					解決方法是:當數據每次以很少量的方式進入發送端時，發送端只是發送第一次到達的數據字節；然後將其後
					到達的字節緩衝，直到第一次發出去的數據段得到確認。	Nagle算法
					
					低能窗口綜合症:

					其形式是當數據以大塊形式被傳遞給發送端TCP實體，但是接收端的交互式應用每次僅讀取1個字節。於是因爲
				數據量大，但數據讀寫緩慢引起的發送方長期處於阻塞狀態。
					
					解決方法是:禁止接收端發送只有1個字節的窗口更新段。它強制接收端必須等待一段時間，直到有了一定數量
				的可用空間之後再通告對方。					Clark

				TCP計時器管理:

					TCP連接上最重要的是重傳計時器(RTO,Retransmission TimeOut)。在TCP段出發時啓動該計時器，超時時間內
				收到確認則取消RTO；在超時之後重傳先前的數據段並重置RTO。

					爲了動態的更新超時，TCP會維護一個變量SRTT(Smoothed Round-Trip Time,平滑的往返時間)，它代表到達
				接收方往返時間的當前最佳估計值。

					SRTT的更新公式是:	SRTT=a*SRTT+(1-a)*R

					R是TCP在一次段的傳輸過程中測量的耗時。
					a是一個平滑銀子，它決定了老的RTT值所佔的權重。RTT指的是超時值。典型情況下a=7/8；這類公式是
				指數加權移動平均(EWMA,Exponentially Weighted Moving Average)。
	
					但是即便有一個好的SRTT，要選擇一個合適的RTT也相當困難。TCP最初使用的2xRTT，但是常數值不太靈活。
				於是Jacobson提議讓超時值對往返時間的變化以及平滑的往返時間要變的敏感。這要求跟蹤另一個平滑變量，
				RTTVAR(往返時間變化，Round-Trip Time VARiation)，即更新爲公式:

								RTTVAR=p*RTTVAR+(1-p)|SRTT-R|

					典型的P=3/4；因此RTO爲:	RTO=SRTT+4xRTTVAR

					但是有一個問題:如果一個段超時並重新發送以後該怎麼辦？
					Phil Karn提出了一個解決方案:不更新任何重傳段的估算值。此外每次連續重傳的超時間隔值加倍，直到段
				能一次通過爲止。

					TCP還有個計數器是持續計時器(persistence timer)。它設計的目的是爲了避免死鎖。

					第三個計時器是保活計時器(keepalive timer)。它的目的是在一段空閒時間後向對方發送探測啞段來確認對方
				是否在線。

					最後一個計時器即TIMED WAIT狀態使用的計時器，用來等待數據包死亡。它的超時值設置爲2倍的TTL。

				TCP擁塞控制:

					TCP傳輸實體會在收到ECN後降低速率。有的沒有使用ECN機制的連接，可能會使用丟包作爲擁塞信號。

					首先爲了算法可以收斂到一個公平且有效的帶寬分配，與爲了避免網絡擁塞；TCP一般都是將丟包作爲了網絡擁
				塞的信號。一般的控制法則是使用AIMD。TCP會維護一個擁塞窗口(congestion window)，這個窗口限制了它可以注入網絡
				中的流量。

					同時TCP還有一個流量控制窗口，TCP需要併發跟蹤這兩個窗口。TCP擁塞控制中，選擇阻塞權值時，擁塞控制窗口
				與流量控制窗口哪一個小，就取哪一個。

					TCP窗口大小的相關問題:

						假設有一條跨越兩條鏈路的TCP連接，發送方的鏈路的速率爲1Gbps，接收方的鏈路速率爲1Mbps。此時
					會在接收方鏈路上引入排隊延遲。因爲1Gbps的突發流量在1Mbps的鏈路上發送將會引入大量的延遲；這種情況下
					確認段分散還有超時的可能。相對於鏈路而言，數據包的長度更長了。
						首先段的確認中有時間戳選項，如果讓發送方的後續傳輸按照時間戳間隔來傳送數據包，則可以避免
					這個問題；但是引入的延遲問題還是無法避免，只是鏈路的利用率上升了。這個時序就是確認時鐘(ack clock)。

						還有個問題就是如果網絡擁塞窗口從一個很小的規模開始，那麼網絡上的應用AIMD規則將需要很長的時
					間才能到達一個良好的操作點。在良好操作點來臨之前，效率會偏低。

						解決方式是修改AIMD以一個慢速啓動方式工作:
								即每收到一個確認段，對應網絡擁塞窗口將加1；也就是 1 2 4 8...指數增長。這樣可
							以很快的到達良好的操作點。
						爲了控制慢速啓動，發送端需要爲每個連接維護一個慢啓動閥值(slow start threshold)。
						最初這個值設置的很高，可以達到流量控制窗口的大小。TCP以慢速度啓動，直到發生超時，或當前擁塞
					窗口超過該閥值(或接收端的窗口爲滿)。在丟包被檢測到時，這個閥值就設置爲當前擁塞窗口的一半，整個過程
					再重新啓動。即從 1 2 4 8... 。在擁塞窗口超過了閥值後，TCP就切換到線形增加。

					快速確認丟包:

						當丟失數據包的後續數據包到達接收端時，觸發接受端向發送端返回確認。這些確認帶着相同的確認號，
					稱爲重複確認(duplicate acknowledgement)。發送方再連續三次收到同一個確認號時，它就認爲發生了丟包；因
					此可以立即重傳丟失的數據包。		----	這種啓發式機制稱爲快速重傳(fast retransmission)。

						在重傳後擁塞窗口的閥值被設置爲當前的一半。，並重啓慢速啓動。

					快速恢復:

						快速重傳時，連接還工作在一個太大的擁塞窗口，但是它仍然同樣以確認時鐘的速率在運行；每次到達另
					一個重複確認時，可能另一個數據包已經離開網絡(因爲新數據包會觸發確認)。使用重複確認來計算網絡中的數據包，
					有可能讓一些包離開網絡，並繼續爲每一個額外的重複確認發送一個新的包。這就是 快速恢復-啓發式機制。(臨時模式)
						快速恢復退出的時間點在快速重傳之後的一個往返時間後，那時，丟失的包被確認，重複確認流停止。快速
					恢復退出之後，擁塞窗口將被設置爲新的慢啓動閥值，並開始按線形增長。

				這些機制使得TCP上的AIMD達到了加法遞增，乘法遞減的目的。

				還有些性能優化的方法是:

						選擇確認(SACK,Selective ACKnowledgement)；
						
						選擇確認列出了3個已接收的字節範圍，有了這個信息，發送端在實現擁塞窗口時可以更直接地確定
					哪些數據包需要重傳，並器還可以跟蹤那些還在途中的數據包。

						顯式擁塞通知(ECN,Explicit Congestion Notification);
				
						這個功能需要雙方主機進行協商纔可使用。

					
				
	網絡性能優化:

			網絡性能的測量:

				1>確保樣值空間足夠大；
				2>確保樣值具有代表性；
				3>緩存可以破壞測量結果；
				4>確保測試期間不會發生不可知事件；
				5>小心使用粗粒度時鐘；
				6>小心推斷結果；
	
			針對快速網絡的主機建設:

				1>主機速度比網絡速度重要；
				2>減少包技術來降低開銷；
				3>最小化數據預取；
				4>最小化上下文切換；
				5>避免擁塞比從中恢復更好；
				6>避免超時；

			快速處理段:

				在連接建立初期需要耗費多個段來建立初始設置。在進入ESTABLISHED狀態後，處理速度將會提高。

				正常情形:
						狀態必須爲ESTABLISHED，兩端均不打算關閉當前連接，發送的時普通段，且緩衝區夠用。
					此種情況下，無須在內核中進行其他額外測試即可處理該段。

				優化方法:

						使用一個帶有靜態參數的頭部結構，靜態即通用或無須改變的參數；這些參數一般被Internet
				通用的。可以準備一個包含這些字段的預預填充的頭結構，然後再根據需要來填充可變字段。除了連接第一個頭
				不爲靜態預填充外，後續的段都可以使用這個方法。然後由接收方會查詢對應段的連接記錄，查詢方法可以使用
				一個加速連接記錄查詢過程的優化方法:保存一個指針指向最近一次入境段記錄，然後首次查詢先使用這個指針，
				不滿足再後續遍歷表。
						只要當前連接時正常情形，則可以調用一個特殊的快速路徑TCP過程，更新連接記錄並提交數據。
						提交數據時會同時計算校驗和，正確則更新連接記錄並返回確認。這種方法稱作爲頭預測(
				header prediction)。

						還有個優化方法是計時器優化:

							鏈表計數器管理的遍歷會消耗O(N)的時間，這在需要更新連接計時器時將會耗費大量的
						時間在遍歷上。
							如果最大的計時器間隔有上界，且可預測，那麼可以使用一個數組來管理計時器。
							這個數組稱作計時輪(timing wheel)。輪中每個槽對應於一個時鐘滴答。
							計時輪的快捷方法是:
								假設當前時間T=4，如果需要取消第一個設置在T+10超時的計時器，則只要搜索
							第14個槽中開始的鏈表，並將所請求的表項移除即可。但是計時輪中最大容納的計時器爲
							T+數組大小。

			頭壓縮:

				使用協議格式來壓縮頭；頭壓縮(header compression)技術可用來降低高層協議頭消耗的鏈路帶寬。
				
				方案一 Van Jacobson設計，對通過低速串行鏈路上的TCP/IP頭進行壓縮。採用的方法是不寫入基本不變的信息至
			頭中。

				魯棒頭壓縮(ROHC,RObust Header Compression):頭壓縮的現代版本。 RFC 5795定義。
				
					設計目標是能夠容忍發生在無線鏈路上的丟失。每一組被壓縮的協議都有一個輪廓文件，最終傳輸的壓縮
				的頭是攜帶一個指向上下文的引用，本質上是一個連接；對於同一個連接上的數據包，頭中的字段可預測，但不同
				連接將無法預測。

			長肥網絡協議:

				長肥網絡指鏈路帶寬大，但是鏈路的距離長的網絡結構。鏈路的距離過長時，信號的傳播速度因爲是固定的，此時
			網絡延遲將無法進行降低。於是發送端在快速發送數據包後進入阻塞，而傳播延遲無法降低，導致網絡效率低。於是爲了提高
			鏈路利用率，必須根據帶寬-延遲乘積，設計合適的窗口大小。

				高速網絡設計的基本原則是:	爲速度而不是爲帶寬優化進行設計。

				而且在鏈路速度過高時，如果網絡節點的處理速度無法跟上，也會導致網絡效率低的問題。可以使用硬件構建快速網絡
			接口，但是要求工作的協議必須簡單，否則NIC就可能是一塊帶有CPU和自己的獨立程序的插卡。於是爲了確保網絡協處理器(net-
			-work coprocessor)比CPU便宜，它通常是一塊慢速芯片。但是這種設計會導致快速CPU需要等待慢速CPU導致快速CPU大部分是
			空閒狀態。於是需要精心設計處理器之間的通信協議並確保正確地同步和避免競爭，一般來說最好地途徑是使協議儘可能地簡單，
			並且讓快速CPU來處理協議工作。

			延遲容忍網絡:

				DTN:Dealy-Tolerant Network,or a Disruption-Tolerant Network.

				這種DTN結構的網絡中的通信稱爲消息交換(messages switching)。一般工作模式是 存儲-攜帶-轉發。

				比如低地球軌道衛星LEO。LEO與地面基站的通信時間有限，且離下一週期的通信間隔舊，於是要求可以容忍延遲並且可以
			在下次消息交換到來時能夠同步。		---	間歇性通信。

				DTN中的一條消息稱爲一個數據束(bundle)，DTN節點都配備了存儲器，一般是持久性存儲介質。然而存儲器裏的數據束也
			有有效期限制，在過期之後會被清除以便有效利用存儲器空間。

				數據束協議:

						延遲容忍網絡協議棧:

							應用層
						
							數據束協議

						匯聚層		匯聚層
						TCP/IP		其他互聯網

							匯聚層的目的是兼容數據束協議與其他網絡協議，提供了一個通用協議處理或轉換的功能。

				數據束消息格式:

						主塊			有效載荷			可選塊
						|			|
						|			|
						|			
						|			8    6				bit
						|			類型 標誌 長度 數據(可變)
				
			bit	8    20								
				版本 標誌 目標端 源端 報告 託管 創建 生存期 字典
				     |			   (可變)
				     |
				     |
			bit		7		7		6
					狀態報告	服務類型	其他


				主塊(Primary block)+有效載荷+可選塊=數據束消息

				主塊可以看作頭，有效載荷包含數據，可選塊攜帶一些安全參數。

				版本用於指定協議版本，當前爲6.
				標誌字段編碼了一些服務，可以讓源端把它的數據束標記成更高或更低優先級。
			
				地址標識符是DTN重新定義的，爲了能夠跨越多個網絡。它們給DTN提供了應用程序級的路由，例如郵件或分發服務。
				|
				託管(Custodian)是負責照看包交付的當事人。Internet中源節點就是託管人；但是DTN中源端並非經常在線，此時
				需要使用託管傳送(custody transfer)來處理。離接收方近的一個節點負責安全傳遞的責任。
				|
				報告(Report)用於診斷消息。
				|
				所有的標識符都被編碼成一個指向字典的引用，這種方法提供了頭壓縮功能。

				創建(Creation)，該字段攜帶數據束的創建時間，從遠端開始排序的序號以及生存期字段，生存期字段給出該消息的
				有效時間。

				有效載荷中含有類型，標誌，長度，數據等部分。

				類型給出了有效載荷的類型。

				標誌字段描述如何處理數據束的選項。

				長度字段給出數據部分的長度。

				數據字段可變。

				其他塊則會有可能攜帶安全參數等信息。


