									數據鏈路層

數據鏈路層(Data-Link-Layer):

		網絡模型中的第二層，負責點到點鏈路之間的傳輸控制與幀組裝。

數據鏈路層的設計:

		1>向網絡層提供一個定義良好的服務接口；
		2>處理傳輸錯誤(PP鏈路上)；
		3>調節數據流，確保慢速的接收方不會被快速傳輸方發送的數據淹沒；

---------------------------------------------------------------------------------------------------------------

數據鏈路層提供給網絡層的服務:

		1>無確認的無連接服務；
		2>有確認的無連接服務；
		3>有確認的有連接服務；

---------

	無確認的無連接服務:
			指源機器向目標機器發送獨立的幀，目標機器不對這些幀進行確認。例如以太網就是這種連接方式。

	有確認的無連接服務:
			PP鏈路中通信的雙方對各自發送的獨立的幀進行確認，確保在幀丟失後可以重傳。
	
	有確認的有連接服務:
			數據鏈路層提供給網絡層的面向連接服務。使用這種服務時，源機器與目標機器在傳輸任何數據之前
		需要建立一個連接，連接上的每一幀都被編號，且數據鏈路層需要確保發出的每一幀都被有序接收且不重複。

		雙方使用面向連接的服務時，數據傳輸需要經過三個階段:

			1>建立連接；雙方初始化各種變量與計數器，變量與計數器記錄幀的傳輸與接收。
			2>數據傳輸開始；
			3>連接釋放；回收在連接中使用的資源，釋放連接。

------------------------------------------------------------------------------------------------------------------------

成幀:

		數據鏈路層使用物理層的接口向網絡層提供服務。它將來自網絡層的數據流組裝成幀，然後傳遞給物理層發送；
	或者將來自物理層的比特流組裝成幀，然後將有效載荷部分傳遞給網絡層。幀是以不同方式組裝起來的數據塊，這些數
	在數據鏈路層中被稱爲幀(frame)。
		物理層在信道上有噪聲時會向比特流中添加冗餘，但是還是有可能有比特錯誤，這需要數據鏈路層負責檢測錯誤
	或糾正錯誤。


	成幀方式:

		1>字節計數法；
		2>字節填充的標誌字節法；
		3>比特填充的標誌比特法；
		4>物理層編碼違禁法；

	----------------
			
			字節計數法:
				使用頭部中的一個字段來標識該幀中的字符數。通過該字段，接收方可以得知幀的邊界。但是
			該方法在計數值的比特流發生錯誤的情況時，會混淆實際邊界，從而失去同步。

			字節填充的標誌字節法:
				該方法用一些特殊的字符作爲開始與結束，這些特殊字符被稱爲標誌字節(flag byte)。兩個連
			續的特殊字符表示着一個幀的結束與另一個幀的開始。但是當有效載荷中的數據中帶有特殊字符時，有混
			淆這些特殊字符的可能，導致失去同步；於是需要發送方在數據中的每個標誌字節前插入一個特殊的轉義
			字節(ESC)，從而區分出標誌字節。這種方法稱爲字節填充(byte stuffing)。
				當數據載荷中也出現了轉義字節時，同樣也使用字節填充方法，在轉義字節前填充一個轉義字節，
			接收方收到幀後將會剔除第一個轉義字節。

			比特填充的標誌比特法:
				該方法考慮了字節填充的缺點:只能使用8比特的字節。因此該方法將以比特劃分的方式來劃分幀。
			因爲幀是可以在比特級劃分，且可以包含任意大小單位的單元。該方法是爲曾經非常流行的HDLC(高級數據
			鏈路控制)協議而開發的。
				標誌方式:
					每個幀的開始與結束由一個特殊的比特模式，01111110或0x7E 標記。這種比特模式是
				一個標誌字節。每當發送方在數據鏈路層的數據中遇到連續5個1，便自動在輸出的比特流中填入一
				個比特0。接收方在看到連續5個比特1入境，且後面緊跟一個比特0，則自動剔除比特0。
				
				比特填充還確保了轉換的最小密度，這有助於物理層的同步。因此該方法常被用於USB(通用串行總
			線)。

			物理層編碼違禁法:
				物理層會在編碼中添加冗餘比特，以便幫助接收器同步接收，這些冗餘意味這一些信號將不會使用
			在常規的數據中。例如物理層編碼中的4B/5B編碼方式，4個數據位映射成5個信號比特，該方法保證了線路
			上的信號有足夠的跳變。這意味着32個可能的信號中有16個是不會使用的，於是可以使用這些保留的信號來
			標誌幀的開始與結束。

------------------------------------------------------------------------------------------------------------------------

差錯控制:

	數據鏈路層需要保證數據載荷的有序提交與幀中錯誤信息的檢測與糾正。
	
	對於無確認的無連接服務，不管發出去的幀是否正確到達目標機器，發送方只要把出境幀留存即可。

	對於面向連接的服務時，確保可靠傳輸需要向發送方提供一些有關線路另一端狀況的反饋信息，於是需要接收方返回一些控制幀。

	差錯檢測和糾正:

			1>使用糾錯碼(error-correcting code)；這種技術稱爲前向糾錯(FEC,Forward Error Correction）
			2>使用檢錯碼；

			錯誤模型:
				
				1>偶爾熱噪聲引起的單個比特錯誤；
				2>突發性範圍比特錯誤；

				其他錯誤類型:
					有時候一個錯誤的位置可以獲得，或許因爲物理層接收到的一個模擬信號遠離了0或1的預期值，
				因而可以宣佈該比特被丟失。這種情況稱爲擦除信道(erasure channel)。

			糾錯碼一般使用在數據鏈路層，檢錯碼常被用於數據鏈路層，網絡層，傳輸層。

	----------------
	
			糾錯碼:

				1>海明碼；
				2>二進制卷積碼；
				3>裏德所羅門碼；
				4>低密度奇偶校驗碼；
		
			--------
				
				一幀由m個數據位和r個冗餘位組層。在塊碼(block code)中，r個校驗位是作爲與之相關的m個數據位的
			函數計算獲得。在系統碼(systematic code)中，直接發送m個數據位，再發送r個校驗位，並不是再發送前進行
			編碼。在線性碼(line code)中，r個校驗位作爲m個數據位的線性函數被計算得出，函數一般選擇XOR或則(mod 2)

				碼字(code word):一個包含了數據位和校驗位的n位單元稱爲n位碼字。
				碼率(code rate):或簡單稱爲速率，定義位碼字中不包含冗餘部分所佔的比例。

			--------
				
				海明碼:
					兩個碼字中不相同的位的個數被稱爲海明距離(Hamming distance)；意義是，如果兩個碼字的海
				明距離位d，則需要d個1位錯誤才能將一個碼字轉變成另一個碼字。爲了可靠地檢測d個錯誤，需要一個距
				離爲d+1的編碼方案；爲了糾正d個錯誤，需要一個距離爲2d+1的編碼方案。
					假設一種編碼方案:
						--------
							每個碼字有m個消息位和r個校驗位，且能夠糾錯所有單個錯誤。對於 2^m 個合
						法消息，任何一個消息都對應有n個非法碼字，它們與該消息的距離爲1。
							非法消息構成:將該消息對應的合法碼字的n位取反，可以得到n個距離爲1的非法
						碼字。
							因此每個 2^m 中的合法消息需要n+1個位模式來標識它們。由於總共有 2^n 個
						位模式，所以必須要有 (n+1)2^m <= 2^n。由於 n=m+r,於是得到:

									(m+r+1)<=2^r
				
							在給定m的情況下，這個條件給出了糾正單個錯誤所需要的校驗位數的下界。

					海明距離方便理解塊碼，海明碼常被用在糾錯存儲器中。

			--------
				
				卷積碼:
			
					卷積碼不屬於塊碼。在卷積碼中，編碼器有內存，編碼器處理一個輸入位序列，並生成一個輸出位
				序列。在塊碼中沒有自然消息大小或編碼邊界，輸出取決於當前的輸入和以前的輸入。
					決定當前輸出的以前輸入位數稱爲代碼的約束長度(constraint length)，卷積碼由它們的速率和
				約束長度來標識。
					卷積碼常被用於網絡部署，已經成爲了802.11一部分。
					802.11中的卷積碼編碼方式一般是，輸出位是輸入位和內部狀態的XOR和，編碼器處理的是比特位，
				並執行線性運算，因此是二進制的線性卷積碼。內部狀態存放在寄存器中。
					卷積碼的解碼是:針對一個輸入位序列，找出最有可能產生觀察到的輸出位序列(包含任何錯誤)。

					軟判決解碼(soft-decision decoding):
						帶有一位不確定性的工作方式，例如將-0.1V視爲"很可能是0"與0.9V視爲"還可能是1"。
					硬判決解碼(hard-decision decoding):
						在執行糾錯之前就決定了每個位是0或1的工作方式。

			--------

				裏德所羅門碼:
			
					它基於這樣一個事實:每一個n次多項式是由n+1點唯一確定的。例如，一條具有ax+b形式的線由兩個
				點所決定，同一條線上的額外點都是冗餘的。可以認爲兩個數據點代表一條線，且給兩個數據點加上額外兩個
				校驗點。兩個校驗點選自同一條線，如果其中一個點出錯，仍然可以通過接收點的擬合線來恢復這個數據點。
					裏德所羅門碼實際上被定義成一個在有線域上操作的多項式，但工作方式相同。對於m位符號而言，
				碼字長 2^m - 1個符號。一種流行的選擇是m=8，這樣符號就是字節，因此一個碼字長爲255個字節。

			--------
				
				低密度奇偶校驗碼(LDPC,Low-Density Parity Check):
		
					LDPC碼是線性塊碼。LDPC碼中的每個輸出位由一小部分的輸入位形成。這樣使得編碼可以用一個1的
				密度很低的矩陣表示。接收到的碼字通過一個近似算法解碼獲得，該算法通過迭代不斷地改進接收到地數據與
				合法碼字的最佳匹配，以此來糾正錯誤。


------------------------------------------------------------------------------------------------------------------------

檢錯碼:

		1>奇偶碼；
		2>校驗和；
		3>循環冗餘校驗(CRC)；
			
----------------

		奇偶碼:

			把單個奇偶校驗位附加到數據中。奇偶位的選擇原則是使得碼字中的比特1的數目是偶數(或奇數)。因爲任何1位
		錯誤都使得奇偶碼出錯，因此奇偶碼可以檢測出1位錯誤。但是如果出現突發錯誤就無法很好的檢測到錯誤，於是需要使
		用一種交錯校驗的方法。
			交錯校驗是一種將檢測(或糾正)單個錯誤的編碼轉換成能檢測(或糾正)突發錯誤的通用技術。
			方法是:改變計算校驗位的次序，即以不同於數據位發送的次序來計算校驗位。
			假設數據塊排列爲矩形，n列k行；交錯校驗對於nk長度的數據塊使用了n個校驗位，就能夠檢測出一個長度小於或
		等於n的突發錯誤。但是，一個長度爲n+1的突發錯誤將被遺漏。

		--------

		校驗和(checksum):

			校驗和常用來指與信息相關的一組校驗位。

			一組奇偶校驗位也是校驗和的例子。校驗和通常放在消息的末尾，作爲求和功能的補充。這樣一來，通過對於整個
		接收到的碼字進行求和計算就能檢錯出錯誤。如果計算結果是0，則沒有檢測出錯誤。
			其他還有Internet校驗和，放置在IP頭中的16位數據校驗和，該校驗和是按16位字計算得到的消息位總和。它以補
		碼運算而非 2^16 模加運算得到。

		--------

		循環冗餘校驗碼(CRC,Cyclic Redundancy Check):

			CRC，也稱爲多項式編碼(polynomial code)。基本思想是:將位串看成是係數爲0或1的的多項式。一個k位幀看作是
		一個k-1次多項式的係數列表，該多項式一共k項，從 x^(k-1) 到 x^0。

			例如，數據字節 255 與 64 寫作爲多項式是:

				255:	1*x^7+1*x^6+1*x^5+1*x^4+1*x^3+1*x^2+1*x^1+1*x^0

					k位幀看爲k-1次多項式的係數列表:
					
					1 1 1 1 1 1 1
				
				64:	0*x^7+0*x^6+1*x^5+0*x^4+0*x^3+0*x^2+0*x^1+0*x^0

					k位幀看爲k-1次多項式的係數列表:

					0 0 1 0 0 0 0

			多項式的算術運算遵循代數域理論規則，以2爲模來完成。加法與減法都等同於異或。

			使用多項式編碼時，發送方和接收方必須預先協商一個生成多項式(generator polynomial) G(x)。它的最高位和最低
		位係數必須是1.
			
			計算CRC的算法:

				1>假設G(x)的階爲r。在幀的低位端加上r個0位，使得該幀現在包含m+r位，對應多項式位x^r * M(x)。

				2>利用模2除法，用對應於G(x)的位串去除對應於 x^r * M(x) 的位串。

				3>利用模2減法，從對應於 x^r * M(x)的位串中減去餘數(總是小於等於r位)。結果就是將被傳輸的帶校驗和
				的幀
			

			帶r個校驗位的多項式編碼可以檢測到所有長度小於等於r的突發錯誤。如果突發錯誤的長度爲r+1，則當且僅當突發錯
		誤與G(x)一致時，錯誤多項式除以G(x)的餘數才爲0。

			IEEE 802 中的CRC:

				x^32+x^26+x^23+x^22+x^16+x^12+x^11+x^10+x^8+x^7+x^5+x^4+x^2+x^1+1
			
			該CRC可以檢測到長度小於等於32的所有突發錯誤，以及影響到奇數位的全部突發錯誤。

---------------------------------------------------------------------------------------------------------------

流量控制:

		在數據鏈路層中的另一個重要問題是雙法通信時的速度控制。需要確保快速發送方不會用數據淹沒慢速的接收
	方。控制的方式有兩種:

			1>基於反饋的流量控制(feedback-based flow control)；

				接收方給發送方返回消息，通知它繼續發送或者暫停。

			2>基於速率的流量控制(rate-based flow control);

				該方式使用鏈路層協議的內置機制，它能限制發送方發送幀的速率，而無需等待對方的反饋。

------------------------------------

		基本數據鏈路層的協議:

				數據鏈路層有一些用與規範雙方通信方式的協議，其作用是控制幀的順序以及重傳與確認，以
			及發送速率控制。幀在發送時也會被添上序號，以此可以分清原始幀與重傳幀。

				常用的有:

						1>停-等式協議；
						2>滑動窗口協議--|
								|-2.1> 1位滑動窗口協議；
								|-2.2> 回退N協議；
								|-2.3> 選擇重傳協議；

			
				--------

				停-等式協議 & 1位滑動窗口協議:

					滑動窗口指的是發送方通過傳播延遲以及幀大小所計算出來的信道上最大可傳輸的數據
				量。這個數據量是對應於接收方的處理速度來說的。
					發送方在傳輸幀後，接收方需要對收到的幀返回確認。幀中帶有序號，於是需要針對每
				個序號的幀進行確認。在全雙工信道上，確認(ACK)有時附帶在發出去的數據幀上。例如，有兩個
				通信的對象 A , B。
					首先A向B發出幀1，B收到幀後需要向A返回對幀1的確認；但是此時，正好B也有數據需要
				發送給A，於是可以將對幀1的確認ACK1附帶在它將發送的數據幀中。這種方法稱作爲捎帶確認(
				piggybacking)。協議還需要控制這個等待時間，不能太久。否則，當A在超時內未收到對幀1的
				確認時，A將會重傳幀1，這將會浪費信道利用率。

					關於滑動窗口的計算:
						假設滑動窗口大小爲w，鏈路帶寬爲B，對某個幀的確認的延遲爲D。

						於是，鏈路的帶寬-延遲乘積(bandwidth-delay product)爲BD，於是可以計算
					出滑動窗口大小w:

							w=2BD+1

						乘以2是因爲有確認延遲。確認幀也是以帶寬B返回給接收方的，於是2倍的傳播
					延遲乘以帶寬B；+1是因爲必須接收完整個幀之後，確認幀纔會發出。

						B=100kbps,D=80ms；那麼w的值爲:

						w=100kbps * 80ms *2 +1=100kbps * 0.08s *2 +1=16kb+1=17kb;

						假設在這條鏈路上傳輸的幀大小爲1500字節(以太網幀):

						F=1500*8=120000b=120kb;

						此時w的值小於120kb，於是將會對幀進行分割成更小的幀，這些幀稱爲段。

						假設在這條鏈路上傳輸的幀的大小爲200b:

						F=200;
						w=17000b;

						w/=F;w=85.
		
						於是在這條鏈路上最多可以發送85個大小爲200b的幀給接收方，且不會淹沒對方。

						對於較小尺寸的窗口，發送方會經常被阻塞，鏈路利用率將小於100%；鏈路利用率
					可以表示成發送方未被阻塞的時間比例:

							鏈路利用率<=w/(1+2BD)

					停-等式與1位滑動窗口基本是一樣的；

						停-等式協議是，發送方在發送一個幀後必須被阻塞，直到收到對該幀的確認。
					這樣的協議就稱爲自動重複請求(ARQ,Automatic Repeat reQuest)或帶有重傳的肯定確
					認(PAR,Positive Acknowledgement with Retransmission)。

						1位滑動窗口是將w的值設置爲1，在滑動窗口滿時，即當前w爲最大值1時，發送
					方被阻塞。直到收到幀的確認後，w的值減去1。

				--------

					回退N協議:

						保持多個幀同時在傳輸的技術時管道化(pipelining)的一個例子。當幀在發送錯誤
					時，但是後續的幀已經到達。而損壞的幀會被丟棄，此時將會導致幀的順序斷掉了。數據鏈路
					層需要按需提交數據載荷的。
						此時可以丟棄掉損壞幀以及其後續幀，在發送方的確認超時後，它將會重傳這些幀。
					這種方式就是回退N。這種方式的鏈路利用率很高，而實際的有效帶寬利用率卻很低；因爲它
					重複傳輸了數據幀。	

				--------
					
					選擇重傳協議:
				
						選擇重傳協議也同回退N協議，但是它會緩存收到的幀；當確認幀沒有錯誤後，將會
					返回對該幀的確認，並從緩存空間中取出，提交給網絡層。
						在收到了一個損壞的幀時，可以不丟棄後續到來的幀；而是將它們都緩存起來，再向
					發送方返回一個否定確認NAK(NAK,negative acknowledgement)的控制幀，以此觸發對損壞幀的
					重傳。待損壞幀的重傳幀到達後，將緩存空間的幀取出，提交給網絡層。這種方式有效的利用了
					帶寬，但是卻會消耗數據鏈路層的緩存空間。緩存空間中對應的地址將要設置標志位，來表明該
					緩衝區是否可用。

				------------------- 數據鏈路層的重傳輔助計時器的設置也許謹慎，否則會導致較快重傳或者通信延遲。


---------------------------------------------------------------------------------------------------------------

數據鏈路層的協議實例:

			1>點到點鏈路，例如SONET鏈路；
			2>Internet邊緣的電話網絡本地迴路上的ADSL鏈路。

			RFC 1661 -> 點到點協議(PPP,Point-Point Protocol)；對等網絡是P2P(Peer to Peer)。


	------------

			SONET上的數據包:

				SONET上的鏈路之間的協議是點到點協議PPP。PPP包括了處理錯誤檢測鏈路的配置，支持多種
			協議，允許身份認證等。它是早期簡化協議的改進，那個協議稱爲串行線路Internet協議(SLIP,Serial
			 Line Internet Protocol)。

				PPP提供了3個主要的特性:

						1>一種成幀的方法。它可以毫無歧義地區分出一幀地結束和下一幀地開始；

						2>一個鏈路控制協議。它可用於啓動線路，測試線路，協商參數，以及當線
						路不再需要時，溫和地關閉線路。該協議稱爲鏈路控制協議(LCP,Link Control
						 Protocol)；

						3>一種協商網絡層選項的方式。協議方式獨立於網絡層協議，所選擇的方法是
						每一種支持的網絡層都有一個不同的網絡控制協議(NCP,Network Control Pr-
						-otocol)。


				PPP的幀格式非常相像於HDLC幀格式。HDLC是高級數據鏈路控制協議(High-level Data Link 
			Control)。PPP於HDLC最主要的區別是:PPP是面向字節而不是面向比特的。

				PPP幀格式:

				bytes

				1	1		1		1|2		可變		2|4		1

				Flag	Address		Control		Protocol	Payload		Checksum	Flag

				
				Flag:取值0x7E，若Flag出現在載荷中，用0x7D去填充；然後將緊跟在後面的那個字節與0x20進行
				XOR，使得第6位比特反轉。

				Address:該字段總取值255，表示所有站點都應該接收該幀。使用這個值可以避免給數據鏈路層分
				配地址。

				Control:默認值3。表示一個無編號幀。

				Protocol:通告Payload中包含了什麼類型的數據包。以0開始的編碼定義爲IPv4|IPv6；以1開始的
				編碼被用於PPP配置協議，包括LCP&NCP。

				Payload:有效載荷字段，長度可變。如果在鏈路層沒有用LCP來協商，則默認爲1500bytes。

				Checksum:校驗和字段。通常2字節，但也可協商爲4字節。

				PPP的有效載荷在插入SONET的有效載荷之前先進行擾碼操作，用長僞隨機序列對有效載荷進行擾碼
			XOR後再傳送出去。目的是爲了保持同步的SONET比特流。

				PPP鏈路建立:

							ESTABLISH		AUTHENTICATE

					DEAD								NETWORK
						
							TERMIHNATE		OPEN

					
					初始爲DEAD，檢測到載波信號時進入ESTABLISH；之後PPP對等實體可以協商參數，利用
				LPC。如果LPC協商成功則進入AUTHENTICATE，如果雙方認證成功，則進入NETWORK；失敗則進入
				TERMIHNATE。在NETWORK狀態可以使用NCP來配置網絡層參數，之後將進入OPEN狀態。此時可以開
				始數據傳輸；傳輸完畢後進入TERMIHNATE，再進入DEAD。


	------------

			對稱數字用戶線:

				ADSL，一般電話網絡本地迴路上的鏈路。
				ADSL的協議棧:

					

							IP				IP
						
						|802.3|		PPP		PPP		|LINK|
						|     |		AAL5		AAL5		|    |
						|     |		ATM		ATM		|    |
						|802.3|		ADSL		ADSL		|LINK|
					PC								Internet

					本地LAN使用以太網連接到DSL調製解調器，其中有PPP協議，AAL5協議，ATM協議，ADSL
				協議。

					ATM:
						異步傳輸模式(ATM,Asynchronous Transfer Mode)。它是一種鏈路層，它的傳輸
					基於固定長度的信息信元(cell)。"異步"意味着這些信元不總是以連續的方式發送，只有
					當出現需要運載的信息時，才發送信元。ATM是一種面向連接的技術，每個信元在頭部帶
					有虛電路(virtual circuit)標識符，交換設備根據此標識符沿着連接建立的路徑轉發信元。

					AAL5:
						爲了在ATM網絡上發送數據，需要將數據映射成一系列的信元。這個映射由ATM適
					配層完成，映射過程稱爲分段(segmentation)和重組(reassembly)。針對不同的服務定義了
					幾個適配層，從週期性的聲音樣本到數據包數據。其中一個主要用於數據包數據的適配層是
					ATM適應層5(AAL5,ATN Adaotation Layer 5)。

					AAL5幀格式:

						bytes

						1|2		可變		0-47	2	2	4
						PPP協議		PPP_Payload	填充	未用	長度	CRC

					
						AAL5幀內，PPP的成幀功能並不是必需的，ATM和AAL5早已提供了成幀功能。同樣PPP
					中的CRC也沒必要，AAL5中已經包括了相同的CRC。這個錯誤檢測機制補充了ADSL的物理層功能，
					ADSL物理層採用Reed-Solomon碼來檢測錯誤，同時還用1字節的CRC來檢測遺漏的任何錯誤。



